//
//  CurrencyCode.swift
//  EtherpunkMoneyRegister
//
//  Created by Kennith Mann on 7/4/24.
//
import Foundation

/// Enum representing supported currency codes.
/// Conforms to `String`, `Codable`, `CaseIterable`, and `Identifiable` for easy serialization and use in SwiftUI views.
/// Much of this was generated by ChatGPT because I'm too lazy to type all the country codes by hand and, to be frank, I'm a dumb American who has family outside of the US so I'm trying to keep them in mind as well and get the practice for thinking outside of the US.
enum CurrencyCode: String, Codable, CaseIterable, Identifiable {

    /// United States Dollar
    case USD
    /// Euro
    case EUR
    /// British Pound
    case GBP
    /// Japanese Yen
    case JPY
    /// Chinese Yuan
    case CNY

    // Eurozone countries and their ISO 3166-1 alpha-2 country codes
    /// Austria
    case AT
    /// Belgium
    case BE
    /// Cyprus
    case CY
    /// Estonia
    case EE
    /// Finland
    case FI
    /// France
    case FR
    /// Germany
    case DE
    /// Greece
    case GR
    /// Ireland
    case IE
    /// Italy
    case IT
    /// Latvia
    case LV
    /// Lithuania
    case LT
    /// Luxembourg
    case LU
    /// Malta
    case MT
    /// Netherlands
    case NL
    /// Portugal
    case PT
    /// Slovakia
    case SK
    /// Slovenia
    case SI
    /// Spain
    case ES

    /// Unique identifier for the currency code.
    var id: String { self.rawValue }

    /// Initializes `CurrencyCode` based on the device's current locale.
    ///
    /// - Returns: A `CurrencyCode` instance based on the device's locale.
    static func inferFromLocale() -> CurrencyCode {
        let localeIdentifier = Locale.current.identifier

        switch localeIdentifier {
        case "en_US": return .USD
        case "en_EU", "fr_FR", "de_DE", "es_ES", "it_IT", "nl_NL": return .EUR  // Eurozone countries
        case "en_GB": return .GBP
        case "ja_JP": return .JPY
        case "zh_CN": return .CNY
        default: return .USD  // Default to USD if no matching locale is found, because this is my app and I do not expect anyone but me and maybe one or two friends to ever use this.
        }
    }

    /// Returns the currency symbol for the currency code.
    ///
    /// - Returns: A string representing the currency symbol.
    var symbol: String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .currency
        formatter.currencyCode = self.rawValue
        return formatter.currencySymbol
    }
}
