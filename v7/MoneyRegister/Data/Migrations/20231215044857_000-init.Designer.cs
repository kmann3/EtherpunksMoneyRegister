// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoneyRegister.Data;

#nullable disable

namespace MoneyRegister.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231215044857_000-init")]
    partial class _000init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InterestRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastBalancedUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OutstandingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("OutstandingItemCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("StartingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca2444db-f971-48b8-b504-e298ec65b400"),
                            AccountNumber = "",
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2743),
                            CurrentBalance = 1987.19m,
                            InterestRate = 0m,
                            LastBalancedUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2751),
                            LoginUrl = "",
                            Name = "Cash",
                            Notes = "",
                            OutstandingBalance = -10.81m,
                            OutstandingItemCount = 1,
                            StartingBalance = 200m
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalTimeZone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000000",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "290b223e-bc82-495f-b331-a1d79c2fe308",
                            CreatedOn = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2608),
                            Email = "",
                            EmailConfirmed = false,
                            FirstName = "admin",
                            IsDisabled = false,
                            LastName = "admin",
                            LocalTimeZone = "Central Standard Time",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb572419-4a1d-4ecc-bc9a-8adc9808eea2",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e564866a-3e75-4048-b237-d1b892c644f2"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2757),
                            Name = "bills"
                        },
                        new
                        {
                            Id = new Guid("74ab2bc7-3b16-4293-84ba-c3e51c7794d4"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2765),
                            Name = "fast-food"
                        },
                        new
                        {
                            Id = new Guid("a3a44de7-bf38-44ce-93d0-9bd79458fe96"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2766),
                            Name = "gas"
                        },
                        new
                        {
                            Id = new Guid("ac43ead6-51eb-4f2e-b0f3-51c9dd75fb5f"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2768),
                            Name = "groceries"
                        },
                        new
                        {
                            Id = new Guid("cad4a9d1-7411-4716-8bd2-54facaa70507"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2770),
                            Name = "medications"
                        },
                        new
                        {
                            Id = new Guid("27a07080-703f-4de0-a84a-305ce263515a"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2772),
                            Name = "streaming"
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Link_Category_RecurringTransaction", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecurringTransactionId")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId", "RecurringTransactionId");

                    b.HasIndex("RecurringTransactionId");

                    b.ToTable("Link_Category_RecurringTransactions");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("e564866a-3e75-4048-b237-d1b892c644f2"),
                            RecurringTransactionId = new Guid("f491998f-1e7b-49fd-808a-eb32d21df471")
                        },
                        new
                        {
                            CategoryId = new Guid("e564866a-3e75-4048-b237-d1b892c644f2"),
                            RecurringTransactionId = new Guid("ba1e1518-aa64-47fe-87de-0c0ca6eb70e6")
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Link_Category_Transaction", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Link_Categories_Transactions");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("e564866a-3e75-4048-b237-d1b892c644f2"),
                            TransactionId = new Guid("46c6b03e-fe89-41d9-8e03-3431367089c6")
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_RecurringTransactionFrequency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int>("Ordinal")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_RecurringTransactionFrequencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06ef9451-3322-40f9-baaf-aaee0bede78c"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2911),
                            DisplayString = "",
                            Name = "Annually",
                            Ordinal = 0
                        },
                        new
                        {
                            Id = new Guid("538f2c32-ac1f-4afb-b66d-f514c22c8eea"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2916),
                            DisplayString = "",
                            Name = "Monthly",
                            Ordinal = 1
                        },
                        new
                        {
                            Id = new Guid("32565d65-f8d7-4881-95aa-1f3ce8b51691"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2917),
                            DisplayString = "",
                            Name = "Weekly",
                            Ordinal = 2
                        },
                        new
                        {
                            Id = new Guid("9bfd244a-1834-4cb6-ba4c-5047309c4eff"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2919),
                            DisplayString = "",
                            Name = "XDays",
                            Ordinal = 3
                        },
                        new
                        {
                            Id = new Guid("cf150960-f18e-42ea-8a5e-e15b7fd0360a"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2921),
                            DisplayString = "",
                            Name = "XWeekYDayOfWeek",
                            Ordinal = 4
                        },
                        new
                        {
                            Id = new Guid("74cfdfa6-0c5d-432a-bfb3-26c05deec54f"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2922),
                            DisplayString = "",
                            Name = "Irregular",
                            Ordinal = 5
                        },
                        new
                        {
                            Id = new Guid("336b615e-c4cc-48c4-af87-f446470fce97"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2923),
                            DisplayString = "",
                            Name = "Unknown",
                            Ordinal = 6
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_TransactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int>("Ordinal")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f794bcb1-0533-4d02-a444-b18c500e0ca7"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2856),
                            DisplayString = "",
                            Name = "Debit",
                            Ordinal = 0
                        },
                        new
                        {
                            Id = new Guid("1e748af1-dee6-488b-8cac-f6a56f8e9dec"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(2859),
                            DisplayString = "",
                            Name = "Credit",
                            Ordinal = 1
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.RecurringTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FrequencyDateValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FrequencyDayOfWeekValue")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FrequencyLookupId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FrequencyValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("NextDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TransactionGroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionTypeLookupId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("FrequencyLookupId");

                    b.HasIndex("TransactionGroupId");

                    b.HasIndex("TransactionTypeLookupId");

                    b.ToTable("RecurringTransactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f491998f-1e7b-49fd-808a-eb32d21df471"),
                            Amount = -10.81m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(3057),
                            FrequencyLookupId = new Guid("538f2c32-ac1f-4afb-b66d-f514c22c8eea"),
                            FrequencyValue = 15,
                            Name = "Adobe Photoshop",
                            NextDueDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("950ffba2-9f47-41fe-ad80-885f085cc5cb"),
                            TransactionTypeLookupId = new Guid("f794bcb1-0533-4d02-a444-b18c500e0ca7")
                        },
                        new
                        {
                            Id = new Guid("ba1e1518-aa64-47fe-87de-0c0ca6eb70e6"),
                            Amount = -16.79m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(3109),
                            FrequencyLookupId = new Guid("538f2c32-ac1f-4afb-b66d-f514c22c8eea"),
                            FrequencyValue = 18,
                            Name = "Allstate Apartment Insurance",
                            NextDueDate = new DateTime(2024, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("950ffba2-9f47-41fe-ad80-885f085cc5cb"),
                            TransactionTypeLookupId = new Guid("f794bcb1-0533-4d02-a444-b18c500e0ca7")
                        },
                        new
                        {
                            Id = new Guid("c014e3d0-525b-42c1-b0c4-47421aa0ea76"),
                            Amount = 150m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(3148),
                            FrequencyLookupId = new Guid("538f2c32-ac1f-4afb-b66d-f514c22c8eea"),
                            FrequencyValue = 18,
                            Name = "Test",
                            NextDueDate = new DateTime(2024, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionTypeLookupId = new Guid("1e748af1-dee6-488b-8cac-f6a56f8e9dec")
                        },
                        new
                        {
                            Id = new Guid("cd3ad128-5f8f-40f0-a3a8-9b65bbb1f986"),
                            Amount = 1343.72m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(3164),
                            FrequencyDayOfWeekValue = 3,
                            FrequencyLookupId = new Guid("cf150960-f18e-42ea-8a5e-e15b7fd0360a"),
                            FrequencyValue = 4,
                            Name = "Payday",
                            NextDueDate = new DateTime(2023, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionTypeLookupId = new Guid("1e748af1-dee6-488b-8cac-f6a56f8e9dec")
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RecurringTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TransactionClearedUTC")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TransactionPendingUTC")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionTypeLookupId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("RecurringTransactionId");

                    b.HasIndex("TransactionTypeLookupId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca3f73bf-51bd-46e5-9fd0-613a36955aa6"),
                            AccountId = new Guid("ca2444db-f971-48b8-b504-e298ec65b400"),
                            Amount = 1998m,
                            Balance = 1998m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(3178),
                            Name = "payday",
                            Notes = "",
                            TransactionClearedUTC = new DateTime(2023, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionPendingUTC = new DateTime(2023, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionTypeLookupId = new Guid("1e748af1-dee6-488b-8cac-f6a56f8e9dec")
                        },
                        new
                        {
                            Id = new Guid("46c6b03e-fe89-41d9-8e03-3431367089c6"),
                            AccountId = new Guid("ca2444db-f971-48b8-b504-e298ec65b400"),
                            Amount = -10.81m,
                            Balance = 1987.19m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(3231),
                            Name = "Adobe Photoshop",
                            Notes = "",
                            RecurringTransactionId = new Guid("f491998f-1e7b-49fd-808a-eb32d21df471"),
                            TransactionTypeLookupId = new Guid("f794bcb1-0533-4d02-a444-b18c500e0ca7")
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TransactionId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TransactionGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("950ffba2-9f47-41fe-ad80-885f085cc5cb"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 15, 4, 48, 57, 325, DateTimeKind.Utc).AddTicks(3034),
                            Name = "All Regular Bills"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Account", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Category", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Link_Category_RecurringTransaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.Category", null)
                        .WithMany("Link_Category_RecurringTransactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.RecurringTransaction", null)
                        .WithMany("Link_Category_RecurringTransactions")
                        .HasForeignKey("RecurringTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Link_Category_Transaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.Category", null)
                        .WithMany("Link_Category_Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.Transaction", null)
                        .WithMany("Link_Category_Transactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_RecurringTransactionFrequency", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_TransactionType", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.RecurringTransaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("MoneyRegister.Data.Entities.Lookup_RecurringTransactionFrequency", "FrequencyLookup")
                        .WithMany("RecurringTransactions")
                        .HasForeignKey("FrequencyLookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.TransactionGroup", "Group")
                        .WithMany("RecurringTransactions")
                        .HasForeignKey("TransactionGroupId");

                    b.HasOne("MoneyRegister.Data.Entities.Lookup_TransactionType", "TransactionTypeLookup")
                        .WithMany("RecurringTransactions")
                        .HasForeignKey("TransactionTypeLookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("FrequencyLookup");

                    b.Navigation("Group");

                    b.Navigation("TransactionTypeLookup");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Transaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("MoneyRegister.Data.Entities.RecurringTransaction", "RecurringTransaction")
                        .WithMany("PreviousTransactions")
                        .HasForeignKey("RecurringTransactionId");

                    b.HasOne("MoneyRegister.Data.Entities.Lookup_TransactionType", "TransactionTypeLookup")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeLookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("RecurringTransaction");

                    b.Navigation("TransactionTypeLookup");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionFile", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("MoneyRegister.Data.Entities.Transaction", "Transaction")
                        .WithMany("Files")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionGroup", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Category", b =>
                {
                    b.Navigation("Link_Category_RecurringTransactions");

                    b.Navigation("Link_Category_Transactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_RecurringTransactionFrequency", b =>
                {
                    b.Navigation("RecurringTransactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_TransactionType", b =>
                {
                    b.Navigation("RecurringTransactions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.RecurringTransaction", b =>
                {
                    b.Navigation("Link_Category_RecurringTransactions");

                    b.Navigation("PreviousTransactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Transaction", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Link_Category_Transactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionGroup", b =>
                {
                    b.Navigation("RecurringTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
