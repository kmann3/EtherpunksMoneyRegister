// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoneyRegister.Data;

#nullable disable

namespace MoneyRegister.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231130180424_000-init")]
    partial class _000init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InterestRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastBalancedUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OutstandingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("OutstandingItemCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("StartingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1086ec1-54e4-4e6b-b4df-bd899173c5b5"),
                            AccountNumber = "",
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8444),
                            CurrentBalance = 1987.19m,
                            InterestRate = 0m,
                            LastBalancedUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8450),
                            LoginUrl = "",
                            Name = "Cash",
                            Notes = "",
                            OutstandingBalance = -10.81m,
                            OutstandingItemCount = 1,
                            StartingBalance = 200m
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalTimeZone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000000",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a8e5591-1f72-4fae-a3c0-8b67d330195f",
                            CreatedOn = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8290),
                            Email = "",
                            EmailConfirmed = false,
                            FirstName = "admin",
                            IsDisabled = false,
                            LastName = "admin",
                            LocalTimeZone = "Central Standard Time",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "791d2292-1222-4119-8cd9-32035ef83e5b",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dbd98324-9c2d-416d-aab5-0ed0a7239795"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8458),
                            Name = "bills"
                        },
                        new
                        {
                            Id = new Guid("28969564-5fac-43cb-9312-23eb6687c1ad"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8460),
                            Name = "fast-food"
                        },
                        new
                        {
                            Id = new Guid("62a36dc5-88e5-414c-81b3-cc9d65730bad"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8462),
                            Name = "gas"
                        },
                        new
                        {
                            Id = new Guid("a8909893-d95b-429b-aff8-d20588a4591d"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8464),
                            Name = "groceries"
                        },
                        new
                        {
                            Id = new Guid("3af5cbb9-db6a-4cb3-8b26-2c448b61a519"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8465),
                            Name = "medications"
                        },
                        new
                        {
                            Id = new Guid("97f52edb-840e-4b04-a865-c17d0a950faa"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8467),
                            Name = "streaming"
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Link_Category_RecurringTransaction", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecurringTransactionId")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId", "RecurringTransactionId");

                    b.HasIndex("RecurringTransactionId");

                    b.ToTable("Link_Category_RecurringTransactions");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("dbd98324-9c2d-416d-aab5-0ed0a7239795"),
                            RecurringTransactionId = new Guid("1cb8f9f3-2c60-4ba8-b666-1fb043e3c791")
                        },
                        new
                        {
                            CategoryId = new Guid("dbd98324-9c2d-416d-aab5-0ed0a7239795"),
                            RecurringTransactionId = new Guid("e46b3b2a-9905-45a5-970b-8dc86b436833")
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Link_Category_Transaction", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Link_Categories_Transactions");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("dbd98324-9c2d-416d-aab5-0ed0a7239795"),
                            TransactionId = new Guid("a86f0a76-1908-4535-b89f-08373c8f2d9f")
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_RecurringTransactionFrequency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int>("Ordinal")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_RecurringTransactionFrequencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("72319dd2-d12f-43d1-ae09-b919a382e790"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8610),
                            DisplayString = "",
                            Name = "Annually",
                            Ordinal = 0
                        },
                        new
                        {
                            Id = new Guid("e8555454-3b55-47b0-984a-0702dd6b5092"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8612),
                            DisplayString = "",
                            Name = "Monthly",
                            Ordinal = 1
                        },
                        new
                        {
                            Id = new Guid("4794b272-8abc-4641-8329-279e83f0c8f5"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8614),
                            DisplayString = "",
                            Name = "Weekly",
                            Ordinal = 2
                        },
                        new
                        {
                            Id = new Guid("d3d285d5-d6d6-46a8-a36b-b65db557859a"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8616),
                            DisplayString = "",
                            Name = "XDays",
                            Ordinal = 3
                        },
                        new
                        {
                            Id = new Guid("d9c1d516-26bf-4f00-9e18-8c9b8935082c"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8618),
                            DisplayString = "",
                            Name = "XWeekYDayOfWeek",
                            Ordinal = 4
                        },
                        new
                        {
                            Id = new Guid("1d171f3f-9062-4c69-9d66-772aca93881b"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8619),
                            DisplayString = "",
                            Name = "Irregular",
                            Ordinal = 5
                        },
                        new
                        {
                            Id = new Guid("a2097617-b0d5-40e9-88cb-09b5d6e2db1a"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8621),
                            DisplayString = "",
                            Name = "Unknown",
                            Ordinal = 6
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_TransactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int>("Ordinal")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d755244-fd1a-43e9-a8bd-475d31be1682"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8573),
                            DisplayString = "",
                            Name = "Debit",
                            Ordinal = 0
                        },
                        new
                        {
                            Id = new Guid("bfd06384-56e9-4921-b30f-01c5f4e354d3"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8578),
                            DisplayString = "",
                            Name = "Credit",
                            Ordinal = 1
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.RecurringTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DayOfWeekValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FrequencyDateValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FrequencyLookupId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FrequencyValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("NextDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TransactionGroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionTypeLookupId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("FrequencyLookupId");

                    b.HasIndex("TransactionGroupId");

                    b.HasIndex("TransactionTypeLookupId");

                    b.ToTable("RecurringTransactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1cb8f9f3-2c60-4ba8-b666-1fb043e3c791"),
                            Amount = -10.81m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8745),
                            FrequencyLookupId = new Guid("e8555454-3b55-47b0-984a-0702dd6b5092"),
                            FrequencyValue = 15,
                            Name = "Adobe Photoshop",
                            NextDueDate = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("c8f007a0-ad64-41f5-b6a3-1bac782c2390"),
                            TransactionTypeLookupId = new Guid("7d755244-fd1a-43e9-a8bd-475d31be1682")
                        },
                        new
                        {
                            Id = new Guid("e46b3b2a-9905-45a5-970b-8dc86b436833"),
                            Amount = -16.79m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8806),
                            FrequencyLookupId = new Guid("e8555454-3b55-47b0-984a-0702dd6b5092"),
                            FrequencyValue = 18,
                            Name = "Allstate Apartment Insurance",
                            NextDueDate = new DateTime(2023, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("c8f007a0-ad64-41f5-b6a3-1bac782c2390"),
                            TransactionTypeLookupId = new Guid("7d755244-fd1a-43e9-a8bd-475d31be1682")
                        },
                        new
                        {
                            Id = new Guid("5f8cc0c4-c062-4fe7-8292-a7b604d99265"),
                            Amount = 150m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8884),
                            FrequencyLookupId = new Guid("e8555454-3b55-47b0-984a-0702dd6b5092"),
                            FrequencyValue = 18,
                            Name = "Test",
                            NextDueDate = new DateTime(2023, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionTypeLookupId = new Guid("bfd06384-56e9-4921-b30f-01c5f4e354d3")
                        },
                        new
                        {
                            Id = new Guid("80d96627-438c-4062-aaf8-deb6ef11731a"),
                            Amount = 1343.72m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8901),
                            DayOfWeekValue = 3,
                            FrequencyLookupId = new Guid("d9c1d516-26bf-4f00-9e18-8c9b8935082c"),
                            FrequencyValue = 4,
                            Name = "Payday",
                            NextDueDate = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionTypeLookupId = new Guid("bfd06384-56e9-4921-b30f-01c5f4e354d3")
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RecurringTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TransactionClearedUTC")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TransactionPendingUTC")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionTypeLookupId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("RecurringTransactionId");

                    b.HasIndex("TransactionTypeLookupId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("318a2889-1a57-4473-af5c-1680ae8bce1e"),
                            AccountId = new Guid("b1086ec1-54e4-4e6b-b4df-bd899173c5b5"),
                            Amount = 1998m,
                            Balance = 1998m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8923),
                            Name = "payday",
                            Notes = "",
                            TransactionClearedUTC = new DateTime(2023, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionPendingUTC = new DateTime(2023, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionTypeLookupId = new Guid("bfd06384-56e9-4921-b30f-01c5f4e354d3")
                        },
                        new
                        {
                            Id = new Guid("a86f0a76-1908-4535-b89f-08373c8f2d9f"),
                            AccountId = new Guid("b1086ec1-54e4-4e6b-b4df-bd899173c5b5"),
                            Amount = -10.81m,
                            Balance = 1987.19m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8951),
                            Name = "Adobe Photoshop",
                            Notes = "",
                            RecurringTransactionId = new Guid("1cb8f9f3-2c60-4ba8-b666-1fb043e3c791"),
                            TransactionTypeLookupId = new Guid("7d755244-fd1a-43e9-a8bd-475d31be1682")
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TransactionId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TransactionGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8f007a0-ad64-41f5-b6a3-1bac782c2390"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 30, 18, 4, 23, 763, DateTimeKind.Utc).AddTicks(8721),
                            Name = "All Regular Bills"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Account", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Category", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Link_Category_RecurringTransaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.Category", null)
                        .WithMany("Link_Category_RecurringTransactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.RecurringTransaction", null)
                        .WithMany("Link_Category_RecurringTransactions")
                        .HasForeignKey("RecurringTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Link_Category_Transaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.Category", null)
                        .WithMany("Link_Category_Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.Transaction", null)
                        .WithMany("Link_Category_Transactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_RecurringTransactionFrequency", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_TransactionType", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.RecurringTransaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("MoneyRegister.Data.Entities.Lookup_RecurringTransactionFrequency", "FrequencyLookup")
                        .WithMany("RecurringTransactions")
                        .HasForeignKey("FrequencyLookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.TransactionGroup", "Group")
                        .WithMany("RecurringTransactions")
                        .HasForeignKey("TransactionGroupId");

                    b.HasOne("MoneyRegister.Data.Entities.Lookup_TransactionType", "TransactionTypeLookup")
                        .WithMany("RecurringTransactions")
                        .HasForeignKey("TransactionTypeLookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("FrequencyLookup");

                    b.Navigation("Group");

                    b.Navigation("TransactionTypeLookup");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Transaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("MoneyRegister.Data.Entities.RecurringTransaction", "RecurringTransaction")
                        .WithMany()
                        .HasForeignKey("RecurringTransactionId");

                    b.HasOne("MoneyRegister.Data.Entities.Lookup_TransactionType", "TransactionTypeLookup")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeLookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("RecurringTransaction");

                    b.Navigation("TransactionTypeLookup");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionFile", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("MoneyRegister.Data.Entities.Transaction", "Transaction")
                        .WithMany("Files")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionGroup", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Category", b =>
                {
                    b.Navigation("Link_Category_RecurringTransactions");

                    b.Navigation("Link_Category_Transactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_RecurringTransactionFrequency", b =>
                {
                    b.Navigation("RecurringTransactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_TransactionType", b =>
                {
                    b.Navigation("RecurringTransactions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.RecurringTransaction", b =>
                {
                    b.Navigation("Link_Category_RecurringTransactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Transaction", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Link_Category_Transactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionGroup", b =>
                {
                    b.Navigation("RecurringTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
