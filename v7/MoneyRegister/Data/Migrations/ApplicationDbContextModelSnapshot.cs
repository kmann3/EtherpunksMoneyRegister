// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoneyRegister.Data;

#nullable disable

namespace MoneyRegister.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Link_Category_RecurringTransactions", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecurringTransactionsId")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoriesId", "RecurringTransactionsId");

                    b.HasIndex("RecurringTransactionsId");

                    b.ToTable("Link_Category_RecurringTransactions");
                });

            modelBuilder.Entity("Link_Category_Transaction", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionsId")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoriesId", "TransactionsId");

                    b.HasIndex("TransactionsId");

                    b.ToTable("Link_Category_Transaction");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InterestRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastBalancedUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OutstandingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("OutstandingItemCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("StartingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0af5ab9b-c1fb-4255-bc49-9b7c23014a78"),
                            AccountNumber = "",
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9362),
                            CurrentBalance = 1987.19m,
                            InterestRate = 0.0m,
                            LastBalancedUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9369),
                            LoginUrl = "",
                            Name = "Cash",
                            Notes = "",
                            OutstandingBalance = -10.81m,
                            OutstandingItemCount = 1,
                            StartingBalance = 200.0m
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalTimeZone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000000",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59dfaf52-0009-49b2-8d4c-db2d025b8608",
                            CreatedOn = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9121),
                            Email = "",
                            EmailConfirmed = false,
                            FirstName = "admin",
                            IsDisabled = false,
                            LastName = "admin",
                            LocalTimeZone = "Central Standard Time",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "713d71f7-51f0-4dd7-8ecc-cb596254e9f4",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18cbb4e6-c061-4c99-ba1c-48aa58796a3c"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9380),
                            Name = "gas"
                        },
                        new
                        {
                            Id = new Guid("27e5f753-ad87-4e3b-891d-b8b8b79e8045"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9385),
                            Name = "medications"
                        },
                        new
                        {
                            Id = new Guid("34940e40-e15f-4c60-82ec-e2f17aac7d04"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9381),
                            Name = "groceries"
                        },
                        new
                        {
                            Id = new Guid("5aa2d257-47c6-4099-9b9b-ddb92e697ef0"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9378),
                            Name = "fast-food"
                        },
                        new
                        {
                            Id = new Guid("b7e07c97-b19a-4eb7-a21c-f7f04752f283"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9386),
                            Name = "streaming"
                        },
                        new
                        {
                            Id = new Guid("f8cd9912-25ee-4a10-bb9f-3e686d55e6b7"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9377),
                            Name = "bills"
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.RecurringTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DayOfWeekValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<int>("Frequency")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FrequencyValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("NextDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TransactionGroupId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TransactionType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("TransactionGroupId");

                    b.ToTable("RecurringTransactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("53066614-6c99-4a75-a8f7-8060626bbeca"),
                            Amount = -13.0m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9693),
                            Frequency = 3,
                            Name = "Etherpunk DNS",
                            NextDueDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionType = 1
                        },
                        new
                        {
                            Id = new Guid("54aca43c-77b8-447c-99b5-f2a9cbb1998a"),
                            Amount = 150.0m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9720),
                            Frequency = 0,
                            Name = "Mom / Cellphone",
                            NextDueDate = new DateTime(2023, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionType = 0
                        },
                        new
                        {
                            Id = new Guid("699ed7e7-3829-48df-98fc-7c6d13abd241"),
                            Amount = 378.27m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9745),
                            Frequency = 0,
                            Name = "OPM",
                            NextDueDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionType = 0
                        },
                        new
                        {
                            Id = new Guid("830af3fd-ad62-43f5-9d23-daa961a7919a"),
                            Amount = 1998.0m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9732),
                            DayOfWeekValue = 3,
                            Frequency = 2,
                            FrequencyValue = 4,
                            Name = "SSDI",
                            NextDueDate = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionType = 0
                        },
                        new
                        {
                            Id = new Guid("d542b67c-11e8-4880-a8d8-6cc9c613fcdc"),
                            Amount = -59.4m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9708),
                            Frequency = 3,
                            Name = "Etherpunk Webhosting",
                            NextDueDate = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionType = 1
                        },
                        new
                        {
                            Id = new Guid("09c4a9ac-78dd-4aec-9805-c219daa630fc"),
                            Amount = -2.99m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9537),
                            Frequency = 0,
                            Name = "Apple iCloud",
                            NextDueDate = new DateTime(2023, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("da0c6b64-6975-4c0e-89ad-f096466ff3a4"),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = new Guid("4e1cca60-3ecb-41d1-9265-df24a6d1a5ce"),
                            Amount = -472.12m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9639),
                            Frequency = 0,
                            Name = "Health Insurance",
                            NextDueDate = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("da0c6b64-6975-4c0e-89ad-f096466ff3a4"),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = new Guid("58e9475b-e553-42aa-84c8-0f8bd0fd8300"),
                            Amount = -719.52m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9579),
                            Frequency = 0,
                            Name = "Loan - Ford Explorer",
                            NextDueDate = new DateTime(2023, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("da0c6b64-6975-4c0e-89ad-f096466ff3a4"),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = new Guid("6256ea4d-6822-4445-8fe7-e476f5dfcf44"),
                            Amount = -10.81m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9498),
                            Frequency = 0,
                            Name = "Adobe Photoshop",
                            NextDueDate = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("da0c6b64-6975-4c0e-89ad-f096466ff3a4"),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = new Guid("a5644261-6862-4e72-94af-677acd7a377d"),
                            Amount = -36.81m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9613),
                            Frequency = 0,
                            Name = "Fitness Your Way",
                            NextDueDate = new DateTime(2023, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("da0c6b64-6975-4c0e-89ad-f096466ff3a4"),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = new Guid("bba98b29-af98-4cbf-963b-1d6d1bcbe2e6"),
                            Amount = -83.36m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9653),
                            Frequency = 0,
                            Name = "Loan - DebtCon/Vacation",
                            NextDueDate = new DateTime(2023, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("da0c6b64-6975-4c0e-89ad-f096466ff3a4"),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = new Guid("bbc47043-cc36-4159-a722-e8ec4deba673"),
                            Amount = -12.79m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9626),
                            Frequency = 0,
                            Name = "Google / Etherpunk Email",
                            NextDueDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("da0c6b64-6975-4c0e-89ad-f096466ff3a4"),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = new Guid("c40f3ad9-2c10-4236-9971-2570ea24df55"),
                            Amount = -104.0m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9667),
                            Frequency = 0,
                            Name = "Verizon / Cellphone",
                            NextDueDate = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("da0c6b64-6975-4c0e-89ad-f096466ff3a4"),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = new Guid("cf32f842-89ac-43a6-a860-929c11ca07f2"),
                            Amount = -16.79m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9523),
                            Frequency = 0,
                            Name = "Allstate Apartment Insurance",
                            NextDueDate = new DateTime(2023, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("da0c6b64-6975-4c0e-89ad-f096466ff3a4"),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = new Guid("dc85f682-c4e5-425f-b603-9998e4f4acea"),
                            Amount = -24.67m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9551),
                            Frequency = 0,
                            Name = "Apple Services",
                            NextDueDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("da0c6b64-6975-4c0e-89ad-f096466ff3a4"),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = new Guid("ea3d515f-4c33-4519-811e-fb27c6d4a8f8"),
                            Amount = -80.72m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9564),
                            Frequency = 0,
                            Name = "ATT Internet",
                            NextDueDate = new DateTime(2023, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("da0c6b64-6975-4c0e-89ad-f096466ff3a4"),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = new Guid("f1d9797c-baf0-47d0-be4a-8d83b3db9f88"),
                            Amount = -150.0m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9681),
                            Frequency = 0,
                            Name = "Windows",
                            NextDueDate = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("da0c6b64-6975-4c0e-89ad-f096466ff3a4"),
                            TransactionType = 1
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RecurringTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TransactionClearedUTC")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TransactionPendingUTC")
                        .HasColumnType("TEXT");

                    b.Property<int>("TransactionType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("RecurringTransactionId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8dc1389-d1ad-4b29-8f75-cdf8ef183374"),
                            AccountId = new Guid("0af5ab9b-c1fb-4255-bc49-9b7c23014a78"),
                            Amount = 1998.0m,
                            Balance = 1998.0m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9756),
                            Name = "SSDI",
                            Notes = "",
                            TransactionClearedUTC = new DateTime(2023, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionPendingUTC = new DateTime(2023, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = new Guid("18ab2619-f85c-4038-98a7-2d55f4a4db9c"),
                            AccountId = new Guid("0af5ab9b-c1fb-4255-bc49-9b7c23014a78"),
                            Amount = -10.81m,
                            Balance = 1987.19m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9783),
                            Name = "Adobe Photoshop",
                            Notes = "",
                            RecurringTransactionId = new Guid("6256ea4d-6822-4445-8fe7-e476f5dfcf44"),
                            TransactionType = 1
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TransactionId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TransactionGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da0c6b64-6975-4c0e-89ad-f096466ff3a4"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 19, 10, 12, 38, 619, DateTimeKind.Unspecified).AddTicks(9473),
                            Name = "All Regular Bills"
                        });
                });

            modelBuilder.Entity("Link_Category_RecurringTransactions", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.RecurringTransaction", null)
                        .WithMany()
                        .HasForeignKey("RecurringTransactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Link_Category_Transaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.Transaction", null)
                        .WithMany()
                        .HasForeignKey("TransactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Account", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Category", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.RecurringTransaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("MoneyRegister.Data.Entities.TransactionGroup", "Group")
                        .WithMany("RecurringTransactions")
                        .HasForeignKey("TransactionGroupId");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Transaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany("Transactions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("MoneyRegister.Data.Entities.RecurringTransaction", "RecurringTransaction")
                        .WithMany()
                        .HasForeignKey("RecurringTransactionId");

                    b.Navigation("Account");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("RecurringTransaction");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionFile", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("MoneyRegister.Data.Entities.Transaction", "Transaction")
                        .WithMany("Files")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionGroup", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Transaction", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionGroup", b =>
                {
                    b.Navigation("RecurringTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
