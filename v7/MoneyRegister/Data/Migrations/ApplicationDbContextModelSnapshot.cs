// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoneyRegister.Data;

#nullable disable

namespace MoneyRegister.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InterestRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastBalancedUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OutstandingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("OutstandingItemCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("StartingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7d75c03-e873-4f05-b5d3-fbe35be4f4a8"),
                            AccountNumber = "",
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8128),
                            CurrentBalance = 1987.19m,
                            InterestRate = 0m,
                            LastBalancedUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8134),
                            LoginUrl = "",
                            Name = "Cash",
                            Notes = "",
                            OutstandingBalance = -10.81m,
                            OutstandingItemCount = 1,
                            StartingBalance = 200m
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalTimeZone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000000",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d635eae7-18d8-479e-a5f6-bbd73640645c",
                            CreatedOn = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(7959),
                            Email = "",
                            EmailConfirmed = false,
                            FirstName = "admin",
                            IsDisabled = false,
                            LastName = "admin",
                            LocalTimeZone = "Central Standard Time",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8bf15fd6-51c7-43ad-b12e-b848b562e2ec",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a6c2d2e-baab-4c64-ae85-c7e318761613"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8148),
                            Name = "bills"
                        },
                        new
                        {
                            Id = new Guid("c896dcc7-ea19-4777-810c-35306165138b"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8150),
                            Name = "fast-food"
                        },
                        new
                        {
                            Id = new Guid("b6fc9263-d9fd-40bc-9391-f3b603f7f3c3"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8152),
                            Name = "gas"
                        },
                        new
                        {
                            Id = new Guid("291eee07-9aca-4257-a567-3844c39041dc"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8154),
                            Name = "groceries"
                        },
                        new
                        {
                            Id = new Guid("078d95ef-4465-41bb-b6c6-9d184d51ef3a"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8156),
                            Name = "medications"
                        },
                        new
                        {
                            Id = new Guid("0ced9ac4-6b55-42c1-ae7f-303b026cfd45"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8158),
                            Name = "streaming"
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Link_Category_RecurringTransaction", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecurringTransactionId")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId", "RecurringTransactionId");

                    b.HasIndex("RecurringTransactionId");

                    b.ToTable("Link_Category_RecurringTransactions");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("5a6c2d2e-baab-4c64-ae85-c7e318761613"),
                            RecurringTransactionId = new Guid("11b74f76-8047-451e-9cc6-8067951ca2ae")
                        },
                        new
                        {
                            CategoryId = new Guid("5a6c2d2e-baab-4c64-ae85-c7e318761613"),
                            RecurringTransactionId = new Guid("c6580499-9953-4883-9c44-8eacd73459b5")
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Link_Category_Transaction", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Link_Categories_Transactions");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("5a6c2d2e-baab-4c64-ae85-c7e318761613"),
                            TransactionId = new Guid("70989e28-cf1b-47f5-8d06-b46200a937b2")
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_RecurringTransactionFrequency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int>("Ordinal")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_RecurringTransactionFrequencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56443260-6d7e-490a-934d-0b38bbafa1ab"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8305),
                            DisplayString = "",
                            Name = "Annually",
                            Ordinal = 0
                        },
                        new
                        {
                            Id = new Guid("415d159b-0ee5-4c3d-a3c4-1f23eda20ef1"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8307),
                            DisplayString = "",
                            Name = "Monthly",
                            Ordinal = 1
                        },
                        new
                        {
                            Id = new Guid("9db655f1-5725-4aa9-b1f3-bbeabe5c662d"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8309),
                            DisplayString = "",
                            Name = "Weekly",
                            Ordinal = 2
                        },
                        new
                        {
                            Id = new Guid("948e156e-cae5-436d-9e6e-76f22cc24045"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8311),
                            DisplayString = "",
                            Name = "XDays",
                            Ordinal = 3
                        },
                        new
                        {
                            Id = new Guid("9b05d0fb-08d4-4fb7-ad6b-a781bd44b30b"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8312),
                            DisplayString = "",
                            Name = "XWeekYDayOfWeek",
                            Ordinal = 4
                        },
                        new
                        {
                            Id = new Guid("a7352980-7451-4003-98b7-49672bd5c22c"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8313),
                            DisplayString = "",
                            Name = "Irregular",
                            Ordinal = 5
                        },
                        new
                        {
                            Id = new Guid("a7b25bc7-bc16-41b0-9181-6847af74a835"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8315),
                            DisplayString = "",
                            Name = "Unknown",
                            Ordinal = 6
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_TransactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int>("Ordinal")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cddf9538-4dc8-4950-bcb5-4aa80d0f52c1"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8265),
                            DisplayString = "",
                            Name = "Debit",
                            Ordinal = 0
                        },
                        new
                        {
                            Id = new Guid("9a11cf23-fc72-43a6-a84c-e7b6951bf139"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8269),
                            DisplayString = "",
                            Name = "Credit",
                            Ordinal = 1
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.RecurringTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FrequencyDateValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FrequencyDayOfWeekValue")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FrequencyLookupId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FrequencyValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("NextDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TransactionGroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionTypeLookupId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("FrequencyLookupId");

                    b.HasIndex("TransactionGroupId");

                    b.HasIndex("TransactionTypeLookupId");

                    b.ToTable("RecurringTransactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11b74f76-8047-451e-9cc6-8067951ca2ae"),
                            Amount = -10.81m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8505),
                            FrequencyLookupId = new Guid("415d159b-0ee5-4c3d-a3c4-1f23eda20ef1"),
                            FrequencyValue = 15,
                            Name = "Adobe Photoshop",
                            NextDueDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("cc8e4562-7234-4b74-8f0f-ffa45fde9c0b"),
                            TransactionTypeLookupId = new Guid("cddf9538-4dc8-4950-bcb5-4aa80d0f52c1")
                        },
                        new
                        {
                            Id = new Guid("c6580499-9953-4883-9c44-8eacd73459b5"),
                            Amount = -16.79m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8566),
                            FrequencyLookupId = new Guid("415d159b-0ee5-4c3d-a3c4-1f23eda20ef1"),
                            FrequencyValue = 18,
                            Name = "Allstate Apartment Insurance",
                            NextDueDate = new DateTime(2024, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionGroupId = new Guid("cc8e4562-7234-4b74-8f0f-ffa45fde9c0b"),
                            TransactionTypeLookupId = new Guid("cddf9538-4dc8-4950-bcb5-4aa80d0f52c1")
                        },
                        new
                        {
                            Id = new Guid("09893aa6-90e1-4949-8ead-10fa2da1ad55"),
                            Amount = 150m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8614),
                            FrequencyLookupId = new Guid("415d159b-0ee5-4c3d-a3c4-1f23eda20ef1"),
                            FrequencyValue = 18,
                            Name = "Test",
                            NextDueDate = new DateTime(2024, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionTypeLookupId = new Guid("9a11cf23-fc72-43a6-a84c-e7b6951bf139")
                        },
                        new
                        {
                            Id = new Guid("13eccc08-d856-4bbe-9c15-5f1ca9889c45"),
                            Amount = 1343.72m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8632),
                            FrequencyDayOfWeekValue = 3,
                            FrequencyLookupId = new Guid("9b05d0fb-08d4-4fb7-ad6b-a781bd44b30b"),
                            FrequencyValue = 4,
                            Name = "Payday",
                            NextDueDate = new DateTime(2023, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            TransactionTypeLookupId = new Guid("9a11cf23-fc72-43a6-a84c-e7b6951bf139")
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RecurringTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TransactionClearedUTC")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TransactionPendingUTC")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionTypeLookupId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("RecurringTransactionId");

                    b.HasIndex("TransactionTypeLookupId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa71a04c-8e7e-4e60-b7c7-d25edf0df597"),
                            AccountId = new Guid("d7d75c03-e873-4f05-b5d3-fbe35be4f4a8"),
                            Amount = 1998m,
                            Balance = 1998m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8655),
                            Name = "payday",
                            Notes = "",
                            TransactionClearedUTC = new DateTime(2023, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionPendingUTC = new DateTime(2023, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionTypeLookupId = new Guid("9a11cf23-fc72-43a6-a84c-e7b6951bf139")
                        },
                        new
                        {
                            Id = new Guid("70989e28-cf1b-47f5-8d06-b46200a937b2"),
                            AccountId = new Guid("d7d75c03-e873-4f05-b5d3-fbe35be4f4a8"),
                            Amount = -10.81m,
                            Balance = 1987.19m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8693),
                            Name = "Adobe Photoshop",
                            Notes = "",
                            RecurringTransactionId = new Guid("11b74f76-8047-451e-9cc6-8067951ca2ae"),
                            TransactionTypeLookupId = new Guid("cddf9538-4dc8-4950-bcb5-4aa80d0f52c1")
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TransactionId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TransactionGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc8e4562-7234-4b74-8f0f-ffa45fde9c0b"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 7, 16, 14, 24, 464, DateTimeKind.Utc).AddTicks(8474),
                            Name = "All Regular Bills"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Account", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Category", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Link_Category_RecurringTransaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.Category", null)
                        .WithMany("Link_Category_RecurringTransactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.RecurringTransaction", null)
                        .WithMany("Link_Category_RecurringTransactions")
                        .HasForeignKey("RecurringTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Link_Category_Transaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.Category", null)
                        .WithMany("Link_Category_Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.Transaction", null)
                        .WithMany("Link_Category_Transactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_RecurringTransactionFrequency", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_TransactionType", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.RecurringTransaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("MoneyRegister.Data.Entities.Lookup_RecurringTransactionFrequency", "FrequencyLookup")
                        .WithMany("RecurringTransactions")
                        .HasForeignKey("FrequencyLookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.TransactionGroup", "Group")
                        .WithMany("RecurringTransactions")
                        .HasForeignKey("TransactionGroupId");

                    b.HasOne("MoneyRegister.Data.Entities.Lookup_TransactionType", "TransactionTypeLookup")
                        .WithMany("RecurringTransactions")
                        .HasForeignKey("TransactionTypeLookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("FrequencyLookup");

                    b.Navigation("Group");

                    b.Navigation("TransactionTypeLookup");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Transaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("MoneyRegister.Data.Entities.RecurringTransaction", "RecurringTransaction")
                        .WithMany("PreviousTransactions")
                        .HasForeignKey("RecurringTransactionId");

                    b.HasOne("MoneyRegister.Data.Entities.Lookup_TransactionType", "TransactionTypeLookup")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeLookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("RecurringTransaction");

                    b.Navigation("TransactionTypeLookup");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionFile", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("MoneyRegister.Data.Entities.Transaction", "Transaction")
                        .WithMany("Files")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionGroup", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Category", b =>
                {
                    b.Navigation("Link_Category_RecurringTransactions");

                    b.Navigation("Link_Category_Transactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_RecurringTransactionFrequency", b =>
                {
                    b.Navigation("RecurringTransactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Lookup_TransactionType", b =>
                {
                    b.Navigation("RecurringTransactions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.RecurringTransaction", b =>
                {
                    b.Navigation("Link_Category_RecurringTransactions");

                    b.Navigation("PreviousTransactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Transaction", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Link_Category_Transactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionGroup", b =>
                {
                    b.Navigation("RecurringTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
