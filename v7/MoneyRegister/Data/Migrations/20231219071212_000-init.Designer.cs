// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoneyRegister.Data;

#nullable disable

namespace MoneyRegister.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231219071212_000-init")]
    partial class _000init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InterestRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastBalancedUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OutstandingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("OutstandingItemCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("StartingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e39c60a-db25-4035-ba58-b292a4d6215a"),
                            AccountNumber = "",
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(984),
                            CurrentBalance = 761.84m,
                            InterestRate = 0m,
                            LastBalancedUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(992),
                            LoginUrl = "",
                            Name = "Neches FCU",
                            Notes = "",
                            OutstandingBalance = 0m,
                            OutstandingItemCount = 0,
                            StartingBalance = 2111.84m
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalTimeZone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000000",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0dfdf5ab-a742-42c5-9845-8c96457085e6",
                            CreatedOn = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(788),
                            Email = "",
                            EmailConfirmed = false,
                            FirstName = "admin",
                            IsDisabled = false,
                            LastName = "admin",
                            LocalTimeZone = "Central Standard Time",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f47ad42-24a1-4df9-b69f-6bb244973e8d",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1000),
                            Name = "bills"
                        },
                        new
                        {
                            Id = new Guid("cf625eba-da02-4c9d-aff9-09ac8d518336"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1003),
                            Name = "fast-food"
                        },
                        new
                        {
                            Id = new Guid("4ab6d448-4179-43be-86bd-4cf05e26d491"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1005),
                            Name = "gas"
                        },
                        new
                        {
                            Id = new Guid("39df5472-ef82-4a03-b1a9-ccfbcf25d8c5"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1019),
                            Name = "groceries"
                        },
                        new
                        {
                            Id = new Guid("9cd0394b-f66d-4dea-8eb2-2e41b33a049a"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1021),
                            Name = "medications"
                        },
                        new
                        {
                            Id = new Guid("c8ea5f23-0e77-4332-a9d8-5204c94ec45b"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1023),
                            Name = "streaming"
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Link_Category_RecurringTransaction", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecurringTransactionId")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId", "RecurringTransactionId");

                    b.HasIndex("RecurringTransactionId");

                    b.ToTable("Link_Category_RecurringTransactions");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            RecurringTransactionId = new Guid("db726de5-e85c-4988-9208-d2850aec99a4")
                        },
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            RecurringTransactionId = new Guid("a3e7d0fe-d55f-47b3-b0d6-32b2f0253e83")
                        },
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            RecurringTransactionId = new Guid("6fa0e5e2-da85-46e7-87c5-209fe1d9147d")
                        },
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            RecurringTransactionId = new Guid("87261a0a-b9ba-43ad-bc78-c99ae0f6c992")
                        },
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            RecurringTransactionId = new Guid("f0016241-6925-4b44-8f39-eb0c6f0c841a")
                        },
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            RecurringTransactionId = new Guid("d9b44eb1-9677-40a8-9b9f-d616ba560dc9")
                        },
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            RecurringTransactionId = new Guid("8a3d9a08-6890-4381-84c4-7690dbdd3533")
                        },
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            RecurringTransactionId = new Guid("19f70248-afcb-41c7-b7b9-b967d5b3344f")
                        },
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            RecurringTransactionId = new Guid("68dd3256-8d7b-458e-be17-ffc052273299")
                        },
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            RecurringTransactionId = new Guid("99357fe4-d5ca-49a8-a554-5152e1fe3d8c")
                        },
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            RecurringTransactionId = new Guid("d8245289-7405-4cc0-8e42-2fe4d5114d3b")
                        },
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            RecurringTransactionId = new Guid("ebcbc1c2-994d-4461-8f93-c2f0da45c871")
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Link_Category_Transaction", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Link_Categories_Transactions");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            TransactionId = new Guid("701fbe32-2d08-45a2-92f7-4922879154f2")
                        },
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            TransactionId = new Guid("d61aa8db-e71f-4d0c-b516-14e5ec699b32")
                        },
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            TransactionId = new Guid("dd46c58d-f01b-42e4-98a2-97e53adb6c6b")
                        },
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            TransactionId = new Guid("ab9b793f-f71e-47fb-bbb7-7615d65c7a61")
                        },
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            TransactionId = new Guid("a9c29086-aaad-44f5-a671-f8a32bb0895a")
                        },
                        new
                        {
                            CategoryId = new Guid("0928f11d-219b-4cfc-9130-b363e6eedf1d"),
                            TransactionId = new Guid("843a4dc2-659a-402f-8535-a960476a1de8")
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.RecurringTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FrequencyDateValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FrequencyDayOfWeekValue")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FrequencyValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("NextDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecurringFrequencyType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TransactionGroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("TransactionGroupId");

                    b.ToTable("RecurringTransactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db726de5-e85c-4988-9208-d2850aec99a4"),
                            Amount = -10.81m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1183),
                            FrequencyDateValue = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Adobe Photoshop",
                            NextDueDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            RecurringFrequencyType = "Monthly",
                            TransactionGroupId = new Guid("aff442f2-bf90-4697-b3e9-15e3d26b9c20"),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("a3e7d0fe-d55f-47b3-b0d6-32b2f0253e83"),
                            Amount = -16.79m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1239),
                            FrequencyDateValue = new DateTime(2023, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Allstate Apartment Insurance",
                            NextDueDate = new DateTime(2024, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            RecurringFrequencyType = "Monthly",
                            TransactionGroupId = new Guid("aff442f2-bf90-4697-b3e9-15e3d26b9c20"),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("6fa0e5e2-da85-46e7-87c5-209fe1d9147d"),
                            Amount = -2.99m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1269),
                            FrequencyDateValue = new DateTime(2023, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apple iCloud",
                            NextDueDate = new DateTime(2024, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            RecurringFrequencyType = "Monthly",
                            TransactionGroupId = new Guid("aff442f2-bf90-4697-b3e9-15e3d26b9c20"),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("87261a0a-b9ba-43ad-bc78-c99ae0f6c992"),
                            Amount = -27.92m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1297),
                            FrequencyDateValue = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apple Services",
                            NextDueDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            RecurringFrequencyType = "Monthly",
                            TransactionGroupId = new Guid("aff442f2-bf90-4697-b3e9-15e3d26b9c20"),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("f0016241-6925-4b44-8f39-eb0c6f0c841a"),
                            Amount = -80.72m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1326),
                            FrequencyDateValue = new DateTime(2023, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AT&T",
                            NextDueDate = new DateTime(2024, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            RecurringFrequencyType = "Monthly",
                            TransactionGroupId = new Guid("aff442f2-bf90-4697-b3e9-15e3d26b9c20"),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("d9b44eb1-9677-40a8-9b9f-d616ba560dc9"),
                            Amount = -719.52m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1356),
                            FrequencyDateValue = new DateTime(2023, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Explorer",
                            NextDueDate = new DateTime(2024, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            RecurringFrequencyType = "Monthly",
                            TransactionGroupId = new Guid("aff442f2-bf90-4697-b3e9-15e3d26b9c20"),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("8a3d9a08-6890-4381-84c4-7690dbdd3533"),
                            Amount = -36.81m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1384),
                            FrequencyDateValue = new DateTime(2023, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FrequencyValue = 9,
                            Name = "Fitness Your Way",
                            NextDueDate = new DateTime(2024, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            RecurringFrequencyType = "Monthly",
                            TransactionGroupId = new Guid("aff442f2-bf90-4697-b3e9-15e3d26b9c20"),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("19f70248-afcb-41c7-b7b9-b967d5b3344f"),
                            Amount = -12.79m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1413),
                            FrequencyDateValue = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Etherpunk",
                            NextDueDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            RecurringFrequencyType = "Monthly",
                            TransactionGroupId = new Guid("aff442f2-bf90-4697-b3e9-15e3d26b9c20"),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("68dd3256-8d7b-458e-be17-ffc052273299"),
                            Amount = -472.12m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1439),
                            FrequencyDateValue = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Health Insurance",
                            NextDueDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            RecurringFrequencyType = "Monthly",
                            TransactionGroupId = new Guid("aff442f2-bf90-4697-b3e9-15e3d26b9c20"),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("99357fe4-d5ca-49a8-a554-5152e1fe3d8c"),
                            Amount = -83.36m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1482),
                            FrequencyDateValue = new DateTime(2023, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Personal Loan",
                            NextDueDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            RecurringFrequencyType = "Monthly",
                            TransactionGroupId = new Guid("aff442f2-bf90-4697-b3e9-15e3d26b9c20"),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("d8245289-7405-4cc0-8e42-2fe4d5114d3b"),
                            Amount = -104.00m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1511),
                            FrequencyDateValue = new DateTime(2023, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Verizon",
                            NextDueDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            RecurringFrequencyType = "Monthly",
                            TransactionGroupId = new Guid("aff442f2-bf90-4697-b3e9-15e3d26b9c20"),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("ebcbc1c2-994d-4461-8f93-c2f0da45c871"),
                            Amount = -150.00m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1538),
                            FrequencyDateValue = new DateTime(2023, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "WF: Windows",
                            NextDueDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            RecurringFrequencyType = "Monthly",
                            TransactionGroupId = new Guid("aff442f2-bf90-4697-b3e9-15e3d26b9c20"),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("a2c6bd28-f491-4433-8fab-5304ce375d83"),
                            Amount = 175m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1574),
                            FrequencyDateValue = new DateTime(2023, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mom-CellPhone",
                            NextDueDate = new DateTime(2024, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            RecurringFrequencyType = "Monthly",
                            TransactionType = "Credit"
                        },
                        new
                        {
                            Id = new Guid("cb726dbd-1ec4-4755-8e4a-5e5556ecf631"),
                            Amount = 1998m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1591),
                            FrequencyDayOfWeekValue = 3,
                            FrequencyValue = 4,
                            Name = "Payday",
                            NextDueDate = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            RecurringFrequencyType = "XWeekOnYDayOfWeek",
                            TransactionType = "Credit"
                        },
                        new
                        {
                            Id = new Guid("6dc2019f-a6f7-45ae-b8df-a440fb5ae116"),
                            Amount = 378.27m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1599),
                            FrequencyValue = 1,
                            Name = "OPM",
                            NextDueDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "",
                            RecurringFrequencyType = "Monthly",
                            TransactionType = "Credit"
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RecurringTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TransactionClearedUTC")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TransactionPendingUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("RecurringTransactionId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("701fbe32-2d08-45a2-92f7-4922879154f2"),
                            AccountId = new Guid("1e39c60a-db25-4035-ba58-b292a4d6215a"),
                            Amount = -83.36m,
                            Balance = 2028.48m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Personal Loan",
                            Notes = "",
                            RecurringTransactionId = new Guid("99357fe4-d5ca-49a8-a554-5152e1fe3d8c"),
                            TransactionClearedUTC = new DateTime(2023, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionPendingUTC = new DateTime(2023, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("d61aa8db-e71f-4d0c-b516-14e5ec699b32"),
                            AccountId = new Guid("1e39c60a-db25-4035-ba58-b292a4d6215a"),
                            Amount = -104.00m,
                            Balance = 1924.48m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Verizon",
                            Notes = "",
                            RecurringTransactionId = new Guid("d8245289-7405-4cc0-8e42-2fe4d5114d3b"),
                            TransactionClearedUTC = new DateTime(2023, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionPendingUTC = new DateTime(2023, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("2dd023f6-ec60-4ced-980b-b634b2f2ce64"),
                            AccountId = new Guid("1e39c60a-db25-4035-ba58-b292a4d6215a"),
                            Amount = -838.07m,
                            Balance = 1086.41m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Capital One",
                            Notes = "",
                            TransactionClearedUTC = new DateTime(2023, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("dd46c58d-f01b-42e4-98a2-97e53adb6c6b"),
                            AccountId = new Guid("1e39c60a-db25-4035-ba58-b292a4d6215a"),
                            Amount = -80.72m,
                            Balance = 1005.69m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AT&T",
                            Notes = "",
                            RecurringTransactionId = new Guid("f0016241-6925-4b44-8f39-eb0c6f0c841a"),
                            TransactionClearedUTC = new DateTime(2023, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionPendingUTC = new DateTime(2023, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("ab9b793f-f71e-47fb-bbb7-7615d65c7a61"),
                            AccountId = new Guid("1e39c60a-db25-4035-ba58-b292a4d6215a"),
                            Amount = -150.00m,
                            Balance = 855.69m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "WF: Windows",
                            Notes = "",
                            RecurringTransactionId = new Guid("ebcbc1c2-994d-4461-8f93-c2f0da45c871"),
                            TransactionClearedUTC = new DateTime(2023, 11, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionPendingUTC = new DateTime(2023, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("a9c29086-aaad-44f5-a671-f8a32bb0895a"),
                            AccountId = new Guid("1e39c60a-db25-4035-ba58-b292a4d6215a"),
                            Amount = -472.12m,
                            Balance = 383.57m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Health Insurance",
                            Notes = "",
                            RecurringTransactionId = new Guid("68dd3256-8d7b-458e-be17-ffc052273299"),
                            TransactionClearedUTC = new DateTime(2023, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionPendingUTC = new DateTime(2023, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("843a4dc2-659a-402f-8535-a960476a1de8"),
                            AccountId = new Guid("1e39c60a-db25-4035-ba58-b292a4d6215a"),
                            Amount = 378.27m,
                            Balance = 761.84m,
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OPM",
                            Notes = "",
                            RecurringTransactionId = new Guid("6dc2019f-a6f7-45ae-b8df-a440fb5ae116"),
                            TransactionClearedUTC = new DateTime(2023, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionType = "Credit"
                        });
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TransactionId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TransactionGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aff442f2-bf90-4697-b3e9-15e3d26b9c20"),
                            CreatedById = "00000000-0000-0000-0000-000000000000",
                            CreatedOnUTC = new DateTime(2023, 12, 19, 7, 12, 12, 15, DateTimeKind.Utc).AddTicks(1128),
                            Name = "All Regular Bills"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Account", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Category", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Link_Category_RecurringTransaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.Category", null)
                        .WithMany("Link_Category_RecurringTransactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.RecurringTransaction", null)
                        .WithMany("Link_Category_RecurringTransactions")
                        .HasForeignKey("RecurringTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Link_Category_Transaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.Category", null)
                        .WithMany("Link_Category_Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.Transaction", null)
                        .WithMany("Link_Category_Transactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.RecurringTransaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("MoneyRegister.Data.Entities.TransactionGroup", "Group")
                        .WithMany("RecurringTransactions")
                        .HasForeignKey("TransactionGroupId");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Transaction", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("MoneyRegister.Data.Entities.RecurringTransaction", "RecurringTransaction")
                        .WithMany("PreviousTransactions")
                        .HasForeignKey("RecurringTransactionId");

                    b.Navigation("Account");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("RecurringTransaction");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionFile", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("MoneyRegister.Data.Entities.Transaction", "Transaction")
                        .WithMany("Files")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionGroup", b =>
                {
                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyRegister.Data.Entities.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Category", b =>
                {
                    b.Navigation("Link_Category_RecurringTransactions");

                    b.Navigation("Link_Category_Transactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.RecurringTransaction", b =>
                {
                    b.Navigation("Link_Category_RecurringTransactions");

                    b.Navigation("PreviousTransactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.Transaction", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Link_Category_Transactions");
                });

            modelBuilder.Entity("MoneyRegister.Data.Entities.TransactionGroup", b =>
                {
                    b.Navigation("RecurringTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
