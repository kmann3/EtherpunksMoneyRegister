@page "/account/{Id:guid}"
@inject Data.Services.AccountService MR_AccountService
@inject Data.Services.LookupService MR_LookupService
@inject Data.Services.TransactionService MR_TransactionService
@inject Data.Services.TestService MR_TestService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if(accountDetails == null)
{
    <p><em>Loading...</em></p>
} else
{
    <PageTitle>@accountDetails.Name - Transactions</PageTitle>
    <h1>@accountDetails.Name</h1>
    <MudItem xs="12" md="4">
        <MudSelect T="string" Label="Accounts" @bind-Value="@selectedAccountName" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
            @foreach (var item in accounts)
            {
                <MudSelectItem Value="@(item.Name)" Tag="@(item)" />
            }
        </MudSelect>
    </MudItem>
    <p>
        <em>
            <h5>Balance: @accountDetails.CurrentBalance.ToString("N2")</h5><br />
            Outstanding Balance: @accountDetails.OutstandingBalance.ToString("N2")<br />
            Outstanding Item Count: @accountDetails.OutstandingItemCount<br />
            Outstanding Summary: @accountDetails.OutstandingSummary<br />
            Notes: @accountDetails.Notes <br />
            Starting Balance: @accountDetails.StartingBalance.ToString("N2") <br />
        </em>
        <MudButton Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Info" @onclick="@(e => EditAccount(@accountDetails))">Edit Account</MudButton>
        <MudDataGrid T="Transaction"
                     Filterable="true" Groupable="false" Hover="true" Striped="true" Virtualize="true" Bordered="true" Dense="true"
                     FilterMode="@DataGridFilterMode.ColumnFilterRow"
                     SortMode="@SortMode.None"
                     ServerData="LoadGridData" RowClick="@OnRowClick" @ref="_dataGrid">
            <ToolBarContent>
                <MudButton Color="Color.Primary" OnClick="AddNewDebit">Add Debit</MudButton>
                <MudButton Color="Color.Primary" OnClick="AddNewCredit">Add Credit</MudButton>
                <MudButton Color="Color.Primary" OnClick="ReserveBills">Reserve Bills</MudButton>
                <MudButton Color="Color.Error" OnClick="RecalculateBalances">Recalculate Balances</MudButton>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Name" />
                <PropertyColumn Property="x => x.Amount" Format="C" />
                <PropertyColumn Property="x => x.TransactionPendingLocalTime" Format="d" Title="Pending" CellStyleFunc="@_cellStylePendingFunc" />
                <PropertyColumn Property="x => x.TransactionClearedLocalTime" Format="d" Title="Cleared" CellStyleFunc="@_cellStyleClearedFunc" />
                <PropertyColumn Property="x => x.Notes" Title="Notes" />
                <TemplateColumn Title="Categories">
                    <CellTemplate>
                        @if (context.Item.Categories.Count() > 0)
                        {
                            @foreach (var cat in context.Item.Categories.OrderBy(x => x.Name))
                            {
                                <MudLink Href="@GetCategoryLink(cat.Id)">@cat.Name</MudLink>

                                if (cat.Id != context.Item.Categories.OrderBy(x => x.Name).Last().Id)
                                {
                                    <text>, &nbsp;</text>
                                }
                            }
                        }
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Balance" CellStyleFunc="@_cellStyleBalanceFunc">
                    <CellTemplate>
                        @if (context.Item.TransactionClearedLocalTime != null)
                        {
                            <text>@context.Item.Balance.ToString("C")</text>
                        }
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn CellClass="d-flex justify-end" Filterable="false">
                    <CellTemplate>
                        <MudStack Row>
                            @if (context.Item.TransactionPendingUTC == null && context.Item.TransactionClearedUTC == null)
                            {
                                <MudButton Size="@Size.Small" Variant="@Variant.Outlined" Color="@Color.Primary" OnClick="@(() => this.SetTransactionToPending(context.Item))">Pending</MudButton>
                            }
                            @if (context.Item.TransactionClearedUTC == null)
                            {
                                <MudButton Size="@Size.Small" Variant="@Variant.Outlined" Color="@Color.Primary" OnClick="@(() => this.SetTransactionToCleared(context.Item))">Cleared</MudButton>
                            }
                            <MudButton Size="@Size.Small" Variant="@Variant.Outlined" Color="@Color.Error" OnClick="@(() => this.DeleteTransaction(context.Item))">Delete</MudButton>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Files">
                    <CellTemplate>
                        @if (context.Item.Files.Count() > 0)
                        {
                            <text>@context.Item.Files.Count @(@context.Item.Files.Count == 1 ? "file" : "files")</text>
                        }
                    </CellTemplate>
                </TemplateColumn>

            </Columns>
            <PagerContent>
                <MudDataGridPager T="Transaction" />
            </PagerContent>
        </MudDataGrid>
    </p>
}

@code {
    // TBI: Implement ServerData so we don't end up loading 10 years worth of data
    // https://stackoverflow.com/questions/77008207/use-mudblazor-muddatagrid-serverdata-to-load-paged-data-from-an-api


    [Parameter] public Guid Id { get; set; }

    private List<Account> accounts { get; set; }

    private Account accountDetails;

    private string selectedAccountName { get; set; }
    private MudDataGrid<Transaction>? _dataGrid;
    private Data.DataGridDTO.GridDataRequestDto _requestDto = new();

    private Func<Transaction?, string> _cellStylePendingFunc => x =>
    {
        string reservedTransactionColor = "E89C4B";

        if (x!.TransactionPendingUTC == null && x.TransactionClearedUTC == null)
        {
            return $"background-color:#{reservedTransactionColor}";
        }

        return "";
    };

    private Func<Transaction?, string> _cellStyleClearedFunc => x =>
    {
        string reservedTransactionColor = "E89C4B";
        string pendingTransactionColor = "ffff33";

        if (x!.TransactionPendingUTC == null && x.TransactionClearedUTC == null)
        {
            return $"background-color:#{reservedTransactionColor}";
        } else if (x.TransactionClearedUTC == null)
        {
            return $"background-color:#{pendingTransactionColor}";
        }

        return "";
    };

    private Func<Transaction?, string> _cellStyleBalanceFunc => x =>
    {
        string negativeBalanceColor = "D92619";

        if (x!.Balance < 0)
        {
            return $"background-color:#{negativeBalanceColor}";
        }

        return "";
    };

    protected override async Task OnInitializedAsync()
    {
        accountDetails = await MR_AccountService.GetAccountDetailsAsync(Id);
        accounts = new List<Account>();
        accounts.Add(accountDetails);
        _requestDto.AccountId = accountDetails.Id;
    }

    private async Task<GridData<Transaction>> LoadGridData(GridState<Transaction> state)
    {
        _requestDto.Page = state.Page;
        _requestDto.PageSize = state.PageSize;

        Data.DataGridDTO.TransactionListDto response = await MR_TransactionService.GetTransactionsByPageAsync(_requestDto);
        return new GridData<Transaction>()
        {
            Items = response.Items,
            TotalItems = response.ItemTotalCount
        };
    }

    private async Task OnRowClick(DataGridRowClickEventArgs<Transaction> args)
    {
        DateTime? oldTransactionClearedUTC = args.Item.TransactionClearedUTC;
        var result = await DialogUtil.ShowTransactionDialog(DialogService, false, args.Item);

        if (!result.Canceled)
        {
            Transaction modifiedTransaction = (Transaction)result.Data;
            if (modifiedTransaction.DeletedOnUTC.HasValue)
            {
                await MR_TransactionService.DeleteTransactionAsync(accountDetails, modifiedTransaction);
                accountDetails.Transactions.Remove(args.Item);
                Snackbar.Add($"Item ({modifiedTransaction.Name}) has been deleted", Severity.Error);
            }
            else
            {
                await MR_TransactionService.UpdateTransactionAsync(accountDetails, modifiedTransaction);
                Snackbar.Add($"{modifiedTransaction.Name} has been updated.", Severity.Info);
            }
        }
    }

    private string GetCategoryLink(Guid id)
    {
        return $"/category/{id.ToString()}";
    }

    private async Task ReserveBills()
    {
        var result = await DialogUtil.ShowReserveTransactionDialog(DialogService);

        if (!result.Canceled)
        {
            var selectedBillList = (List<RecurringTransaction>)result.Data;

            await MR_TransactionService.ReserveTransactionsAsync(selectedBillList, accountDetails);
            await _dataGrid.ReloadServerData();
            Snackbar.Add($"{selectedBillList.Count} transactions have been reserved.", Severity.Info);
        }
    }

    private async Task AddNewDebit()
    {
        var debitTypeLookup = (await MR_LookupService.GetLookup_TransactionTypesAsync()).Where(x => x.Name == "Debit").Single();

        Transaction newTransaction = new();
        newTransaction.Account = accountDetails!;
        newTransaction.AccountId = Id;
        newTransaction.TransactionPendingUTC = DateTime.UtcNow;
        newTransaction.TransactionClearedUTC = DateTime.UtcNow;
        newTransaction.TransactionTypeLookup = debitTypeLookup;
        newTransaction.TransactionTypeLookupId = debitTypeLookup.Id;
        newTransaction.Categories = new List<Category>();

        var result = await DialogUtil.ShowTransactionDialog(DialogService, true, newTransaction);

        if (!result.Canceled)
        {
            newTransaction = (Transaction)result.Data;

            await MR_TransactionService.CreateNewTransactionAsync(accountDetails, newTransaction);
            await _dataGrid.ReloadServerData();
            Snackbar.Add($"{newTransaction.Name} has been created.", Severity.Info);
        }
    }

    private async Task AddNewCredit()
    {
        var creditTypeLookup = (await MR_LookupService.GetLookup_TransactionTypesAsync()).Where(x => x.Name == "Credit").Single();

        Transaction newTransaction = new();
        newTransaction.TransactionPendingUTC = DateTime.UtcNow;
        newTransaction.TransactionClearedUTC = DateTime.UtcNow;
        newTransaction.TransactionTypeLookup = creditTypeLookup;
        newTransaction.TransactionTypeLookupId = creditTypeLookup.Id;

        newTransaction.Account = accountDetails!;
        newTransaction.AccountId = Id;
        newTransaction.TransactionPendingUTC = DateTime.UtcNow;
        newTransaction.Categories = new List<Category>();

        var result = await DialogUtil.ShowTransactionDialog(DialogService, true, newTransaction);

        if (!result.Canceled)
        {
            newTransaction = (Transaction)result.Data;

            await MR_TransactionService.CreateNewTransactionAsync(accountDetails, newTransaction);
            await _dataGrid.ReloadServerData();
            Snackbar.Add($"{newTransaction.Name} has been created.", Severity.Info);
        }
    }

    private async Task SetTransactionToPending(Transaction item)
    {
        item.TransactionPendingUTC = DateTime.UtcNow;
        await MR_TransactionService.UpdateTransactionAsync(accountDetails!, item);
        await _dataGrid.ReloadServerData();
        Snackbar.Add($"{item.Name} has been marked as pending.", Severity.Info);
    }

    private async Task SetTransactionToCleared(Transaction item)
    {
        item.TransactionClearedUTC = DateTime.UtcNow;
        await MR_TransactionService.UpdateTransactionAsync(accountDetails!, item);
        await _dataGrid.ReloadServerData();
        Snackbar.Add($"{item.Name} has been marked as cleared.", Severity.Info);
    }

    private async Task RecalculateBalances()
    {
        await MR_AccountService.RecalculateAccountAsync(accountDetails!);
        await _dataGrid.ReloadServerData();
        Snackbar.Add($"{accountDetails.Name} account has been recalculated.", Severity.Info);
    }

    private async Task DeleteTransaction(Transaction item)
    {
        item.DeletedOnUTC = DateTime.UtcNow;
        await MR_TransactionService.DeleteTransactionAsync(accountDetails, item);
        await _dataGrid.ReloadServerData();
        Snackbar.Add($"Item ({item.Name}) has been deleted", Severity.Error);
    }

    private async Task EditAccount(Account account)
    {
        decimal oldBal = account.StartingBalance;
        var result = await DialogUtil.ShowAccountDialogAsync(DialogService, false, accountDetails);
        if(oldBal != account.StartingBalance)
        {
            await MR_AccountService.RecalculateAccountAsync(accountDetails!);
            await _dataGrid.ReloadServerData();
        }
    }
}
