@page "/backup"
@inject Data.Services.BackupService MR_BackupService
@inject IJSRuntime JS

<h3>Backup</h3>

<MudButton OnClick="BackupData">Backup</MudButton>
<br />
<br />
<MudFileUpload T="IBrowserFile" FilesChanged="RestoreBackup">
    <ButtonTemplate>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   for="@context">
            Upload Files
        </MudButton>
    </ButtonTemplate>
</MudFileUpload>

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script>
@code {
    protected override async Task OnInitializedAsync()
    {

    }

    private async Task BackupData()
    {
        string fileName = await MR_BackupService.CreateBackupJsonAsync();
        var fileStream = File.OpenRead(fileName);
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private async Task RestoreBackup(IBrowserFile file)
    {
        string fileName = "restore.zip";
        await using FileStream fs = new(fileName, FileMode.Create);
        await file.OpenReadStream().CopyToAsync(fs);
        fs.Close();

        await MR_BackupService.RestoreBackupJsonAsync(fileName);
    }
}
