@page "/recurringTransaction"
@inject Data.Services.LookupService MR_LookupService
@inject Data.Services.RecurringTransactionService MR_RecTranService
@inject IDialogService DialogService
@inject NavigationManager NavManager

<PageTitle>Mann's Money Management - Recurring Transactions</PageTitle>

@if (recurringTransactions == null)
{
    <p><em>Loading...</em></p>
}
else if (recurringTransactions.Count == 0)
{
    // Probably a new setup, begin guided setup
    <p><em>No items found</em></p>
}
else
{

    <MudDataGrid Items="@recurringTransactions" T="Data.Entities.RecurringTransaction"
                 Filterable="false" SortMode="@SortMode.None" Groupable="false"
                 RowClick="@OnRowClick">
        <ToolBarContent>
            <MudButton Color="Color.Primary" OnClick="AddRecurringTransaction">Add Recurring Transaction</MudButton>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x!.Name" />
            <TemplateColumn Title="Transaction Type">
                <CellTemplate>
                    @if(context.Item.TransactionTypeLookup.Name != null)
                    {
                        @context.Item.TransactionTypeLookup.Name
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Bill Group">
                <CellTemplate>
                    @if (context.Item.Group != null)
                    {
                        @context.Item.Group.Name
                    }
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.FrequencyString" />
            <PropertyColumn Property="x => x.NextDueDate" Title="Next Due" >
                <CellTemplate>
                    @context.Item.NextDueDate?.ToString("d")
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Notes" />
            <PropertyColumn Property="x => x!.Amount" Format="C" />
            <TemplateColumn Title="Categories">
                <CellTemplate>
                    @if (context.Item.Categories.Count() > 0)
                    {
                        @foreach (var cat in context.Item.Categories.OrderBy(x => x.Name))
                        {
                            @cat.Name

                            if (cat.Id != context.Item.Categories.OrderBy(x => x.Name).Last().Id)
                            {
                                <text>, &nbsp;</text>
                            }
                        }
                    }
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}

@code {
    private List<Data.Entities.RecurringTransaction> recurringTransactions;
    private Data.Entities.Lookup_RecurringTransactionFrequency unknownRecurringTransactionFrequency;
    private Data.Entities.Lookup_TransactionType debitRecurringTransaction;

    protected override async Task OnInitializedAsync()
    {
        recurringTransactions = (await MR_RecTranService.GetAllRecurringTransactionsAsync()).OrderBy(x => x.TransactionTypeLookup.Name).ThenBy(x => x.Name).ToList();

        var lookup_RecurringTransactionFrequencies = await MR_LookupService.GetLookup_RecurringTransactionFrequenciesAsync();
        var lookup_TransactionTypes = await MR_LookupService.GetLookup_TransactionTypesAsync();

        unknownRecurringTransactionFrequency = lookup_RecurringTransactionFrequencies.Where(x => x.Name == "Unknown").Single();
        debitRecurringTransaction = lookup_TransactionTypes.Where(x => x.Name == "Debit").Single();
    }

    private async void OnRowClick(DataGridRowClickEventArgs<Data.Entities.RecurringTransaction> item)
    {
        NavManager.NavigateTo($"/recurringTransaction/{item.Item.Id}");
    }

    private async Task AddRecurringTransaction()
    {
        RecurringTransaction newRecurringTransaction = new();
        newRecurringTransaction.FrequencyLookup = unknownRecurringTransactionFrequency;
        newRecurringTransaction.FrequencyLookupId = unknownRecurringTransactionFrequency.Id;

        newRecurringTransaction.TransactionTypeLookup = debitRecurringTransaction;
        newRecurringTransaction.TransactionTypeLookupId = debitRecurringTransaction.Id;

        var result = await DialogUtil.ShowRecurringTransactionDialogAsync(DialogService, true, newRecurringTransaction);
        if (!result.Canceled)
        {
            RecurringTransaction newItem = result.Data as RecurringTransaction ?? throw new NullReferenceException("RecurringTransaction Data returned null. This shouldn't happen.");
            recurringTransactions.Add(newItem);
        }

        this.StateHasChanged();
    }
}
