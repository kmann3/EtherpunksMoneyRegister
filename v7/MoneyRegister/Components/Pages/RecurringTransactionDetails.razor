@page "/recurringTransaction/{Id:guid}"
@using System.Globalization
@inject Data.Services.CategoryService MR_CategoryService
@inject Data.Services.RecurringTransactionService MR_RecTranService
@inject Data.Services.TransactionGroupService MR_TransactionGroupService
@inject IDialogService DialogService
@inject IJSRuntime JS
@inject NavigationManager NavManager

<PageTitle>Recurring Transaction Details - recurringTransaction.Name</PageTitle>
@if (recurringTransaction == null)
{
<p><em>Loading...</em></p>
}
else {
    <h2>@recurringTransaction.Name</h2>
<MudDataGrid Items="@recurringTransaction.PreviousTransactions" T="Data.Entities.Transaction"
                Filterable="false" SortMode="@SortMode.None" Groupable="false" Style="width: 700px;"
                RowClick="@OnRowClick">
    <Columns>
        <PropertyColumn Property="x => x!.Name" />
        <PropertyColumn Property="x => x!.Amount" Format="C" />
        <PropertyColumn Property="x => x!.TransactionPendingLocalTime" Title="Pending" Format="d" />
        <PropertyColumn Property="x => x!.TransactionClearedLocalTime" Title="Cleared" Format="d" />
        <PropertyColumn Property="x => x!.DueDate" Title="Due Date" Format="d" />
        <PropertyColumn Property="x => x!.Notes" />
        <TemplateColumn Title="Attachments">
            <CellTemplate>
                @if (context.Item.Files.Count() > 0)
                {
                    foreach(var file in context.Item.Files)
                    {
                        <text>@file.Name -  @ByteSizeLib.ByteSize.FromBytes(@file.Data.Length).ToString()</text><br />
                    }
                }
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>
<MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" ChartOptions="@_options" Width="100%" Height="350px"></MudChart>
<hr />
<MudGrid>
    <MudItem xs="8">
        <MudTextField T="string" @bind-Value="@recurringTransaction.Name" Label="Name" tabindex="1" />
    </MudItem>
    <MudItem xs="3">
        <AmountComponent @bind-Value="recurringTransaction.Amount" @bind-Value:event="ValueChanged" Index="3" Label="Amount" />
    </MudItem>
</MudGrid>
<TransactionTypeSelectionComponent @bind-Value="@recurringTransaction.TransactionType" @bind-Value:event="ValueChanged" Index="2" />
<MudTextField T="string" @bind-Value="@recurringTransaction.Notes" Label="Notes" AutoGrow tabindex="4" />
<MudTextField T="string" @bind-Value="@recurringTransaction.BankTransactionText" Label="Bank Transaction Text" AutoGrow tabindex="5" />
<MudTextField T="string" @bind-Value="@recurringTransaction.BankTransactionRegEx" Label="Bank Transaction RegEx" AutoGrow tabindex="6" />

<CategorySelectionComponent @bind-Value="recurringTransaction.Categories" @bind-Value:event="ValueChanged" Index="7" />

<RecurringFrequencyDetailsComponent @bind-Value="recurringTransaction" @bind-Value:event="ValueChanged" Index="7" />

<MudGrid>
    <MudItem xs="6">
        <DatePickerComponent @bind-Value="recurringTransaction.NextDueDate" @bind-Value:event="ValueChanged" Index="9" Label="Next Due Date" />
    </MudItem>
</MudGrid>
<TransactionGroupComponent @bind-Value="recurringTransaction.Group" @bind-Value:event="ValueChanged" Index="10" />

<MudButton Color="Color.Error" OnClick="Delete">Delete</MudButton>
<MudButton Color="Color.Warning" OnClick="Save">Save</MudButton>

}

@code {
    [Parameter] public Guid Id { get; set; }
    MudDatePicker _nextDueDatePicker;
    List<Category> categories { get; set; } = new();
    List<TransactionGroup> transactionGroups = new();

    private DateTime? frequencyDate;
    private DayOfWeek frequencyDayOfWeek;

    private IEnumerable<Category> selectedCategories = new HashSet<Category>();

    private RecurringTransaction recurringTransaction { get; set; }

    public List<ChartSeries> Series = new();
    public string[] XAxisLabels = [];
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0
    private readonly ChartOptions _options = new();

    protected override async Task OnInitializedAsync()
    {
        recurringTransaction = await MR_RecTranService.GetRecurringTransactionAsync(Id);
        categories = await MR_CategoryService.GetAllCategoriesAsync();
        transactionGroups = await MR_TransactionGroupService.GetAllTransactionGroupsAsync();
        ResetSelectedCategories();

        _options.YAxisTicks = 10;

        ChartSeries newSeries = new();
        newSeries.Name = "Cost";
        List<double> arrayList = new();
        List<string> xAxisLabelList = new();
        foreach(var pt in recurringTransaction.PreviousTransactions)
        {
            arrayList.Add(Math.Abs((double)pt.Amount));
            xAxisLabelList.Add(pt.TransactionClearedUTC.Value.ToShortDateString());
        }
        XAxisLabels = xAxisLabelList.ToArray();
        newSeries.Data = arrayList.ToArray();

        Series = new List<ChartSeries>();
        Series.Add(newSeries);

        recurringTransaction.PreviousTransactions = recurringTransaction.PreviousTransactions.OrderByDescending(x => x.TransactionClearedUTC).ThenByDescending(x => x.CreatedOnUTC).ToList();
        StateHasChanged();
    }

    private string GetSelectedItemsText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} tag{(selectedValues.Count != 1 ? "s" : "")}";
    }

    private void ResetSelectedCategories()
    {
        HashSet<Category> t = new HashSet<Category>();
        if (recurringTransaction.Categories.Count() == 0) return;
        foreach (var item in recurringTransaction.Categories)
        {
            t.Add(item);
        }

        selectedCategories = t;
    }

    private async Task NewCategoryDialog()
    {
        ResetSelectedCategories();

        var result = await DialogUtil.ShowCategoryDialogAsync(DialogService, true, new Category());

        if (!result.Canceled)
        {
            var catData = result.Data as Category;
            categories.Add(catData!);
            recurringTransaction.Categories.Add(catData!);
            ResetSelectedCategories();
        }
    }

    private async void Save()
    {
        await MR_RecTranService.UpdateRecurringTransactionAsync(recurringTransaction);

        // Display item is saved
    }
    private async Task Delete()
    {
        var result = await DialogUtil.ShowConfirmDialogAsync(DialogService, "Delete", "Delete", $"Are you sure you want to delete the recurring transaction: '{recurringTransaction.Name}'?", Color.Error);
        if (result.Canceled) return;

        recurringTransaction.DeletedOnUTC = DateTime.UtcNow;
        await MR_RecTranService.DeleteRecurringTransactionAsync(recurringTransaction);

        // Display item is deleted.
    }

    private async void OnRowClick(DataGridRowClickEventArgs<Data.Entities.Transaction> item)
    {
        var result = await DialogUtil.ShowTransactionDialog(DialogService, false, item.Item);
        if (result.Canceled) return;
    }
}
