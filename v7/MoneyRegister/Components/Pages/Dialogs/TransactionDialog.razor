@inject Data.Services.AccountService MR_AccountService
@inject Data.Services.CategoryService MR_CategoryService
@inject Data.Services.TransactionService MR_TranService
@inject Data.Services.TransactionGroupService MR_TransactionGroupService
@inject IDialogService DialogService
@inject NavigationManager NavManager


<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            @if (IsNew)
            {
                <MudIcon Icon="@Icons.Material.Filled.Create" Class="mr-3 mb-n1" />
                <text>New Recurring Transaction</text>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
                <text>Edit - @TransactionDetails.Name</text>
            }
        </MudText>
    </TitleContent>
    <DialogContent>
        <TransactionTypeSelectionComponent @bind-Value="TransactionDetails.TransactionType" @bind-Value:event="ValueChanged" Index="1" Label="Transaction Type" />
        <AccountSelectionComponent @bind-Value="TransactionDetails.Account" @bind-Value:event="ValueChanged" Index="2" Label="Account" />

        <MudTextField T="string" @bind-Value="@TransactionDetails.Name" Label="Name" tabindex="3" @ref="firstFocus" Required="true" RequiredError="A name is required." />
        <AmountComponent @bind-Value="TransactionDetails.Amount" @bind-Value:event="ValueChanged" Index="4" Label="Amount" />

        <CategorySelectionComponent @bind-Value="TransactionDetails.Categories" @bind-Value:event="ValueChanged" Index="5" />

        <DatePickerComponent @bind-Value="TransactionDetails.TransactionPendingLocalTime" @bind-Value:event="ValueChanged" Index="6" Label="Pending" />
        <DatePickerComponent @bind-Value="TransactionDetails.TransactionClearedLocalTime" @bind-Value:event="ValueChanged" Index="7" Label="Cleared" />

        <MudTextField T="string" @bind-Value="@TransactionDetails.Notes" Label="Notes" AutoGrow tabindex="8" />

        <!-- Link to recurring transaction history -->
        <MudTooltip>
            <ChildContent>
                <FileComponent @bind-Value="TransactionDetails.Files" @bind-Value:event="ValueChanged" Index="9" Label="Files" />
            </ChildContent>
            <TooltipContent>
                <MudText Typo="Typo.h6">Associated files</MudText>
                <MudText Typo="Typo.body2">Save your billing statements, contracts, or agreements. You never know when this will be useful.</MudText>
            </TooltipContent>
        </MudTooltip>   
        
        <text><br />For statistical purposes:<br /></text>

        <RecurringTransactionComponent @bind-Value="TransactionDetails.RecurringTransaction" @bind-Value:event="ValueChanged" Index="10" />
        
        @if(TransactionDetails.RecurringTransaction != null) 
        {
            <MudTooltip>
                <ChildContent>
                    <DatePickerComponent @bind-Value="TransactionDetails.DueDate" @bind-Value:event="ValueChanged" Index="11" Label="Expected Due Date" />
                </ChildContent>
                <TooltipContent>
                    <MudText Typo="Typo.h6">Expected Due Date</MudText>
                    <MudText Typo="Typo.body2">This is used to keep a track record of due dates to check for shifts over time. Perhaps you think it's monthly but it's really every 30 days - causing it to slowly shift over time.</MudText>
                </TooltipContent>
            </MudTooltip>           
        }
    </DialogContent>
    <DialogActions>
        @if (!IsNew)
        {
            <MudButton Color="Color.Error" OnClick="Delete">Delete</MudButton>
        }

        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Warning" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Transaction TransactionDetails { get; set; } = new();
    [Parameter] public bool IsNew { get; set; }

    private Transaction originalTransaction { get; set; } = new();

    List<Data.Entities.Account> accounts { get; set; } = new();
    List<Category> categories { get; set; } = new();
    List<TransactionGroup> transactionGroups = new();

    private IEnumerable<Category> selectedCategories = new HashSet<Category>();

    private MudTextField<string> firstFocus;

    protected override async Task OnInitializedAsync()
    {
        accounts = await MR_AccountService.GetAllAccountsAsync();
        categories = await MR_CategoryService.GetAllCategoriesAsync();
        transactionGroups = await MR_TransactionGroupService.GetAllTransactionGroupsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await firstFocus.FocusAsync();
        }
    }

    private string GetSelectedItemsText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} tag{(selectedValues.Count != 1 ? "s" : "")}";
    }

    private void ResetSelectedCategories()
    {
        HashSet<Category> t = new HashSet<Category>();
        if (TransactionDetails.Categories.Count() == 0) return;
        foreach (var item in TransactionDetails.Categories)
        {
            t.Add(item);
        }

        selectedCategories = t;
    }

    private async Task NewCategoryDialog()
    {
        ResetSelectedCategories();

        var result = await DialogUtil.ShowCategoryDialogAsync(DialogService, true, new Category());

        if (!result.Canceled)
        {
            var catData = result.Data as Category;
            categories.Add(catData!);
            TransactionDetails.Categories.Add(catData!);
            ResetSelectedCategories();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Save()
    {
        if(TransactionDetails.RecurringTransaction != null && TransactionDetails.RecurringTransaction.Name == "New")
        {
            RecurringTransaction newRT = TransactionDetails.RecurringTransaction;
            newRT.Name = TransactionDetails.Name;
            newRT.Amount = TransactionDetails.Amount;
            newRT.TransactionType = TransactionDetails.TransactionType;
            var result = await DialogUtil.ShowRecurringTransactionDialogAsync(DialogService, true, newRT);
            if (!result.Canceled)
            {
                RecurringTransaction newItem = result.Data as RecurringTransaction ?? throw new NullReferenceException("RecurringTransaction Data returned null. This shouldn't happen.");
                TransactionDetails.RecurringTransaction = newItem;
            } else
            {
                // We probably don't want to close. We might want to ask the user how they would like to proceed?
                return;
                //throw new NotImplementedException("User cancelled conversion to Recurring Transaction?");
            }
        }

        MudDialog.Close(DialogResult.Ok(TransactionDetails));
    }
    private async Task Delete()
    {
        var result = await DialogUtil.ShowConfirmDialogAsync(DialogService, "Delete", "Delete", $"Are you sure you want to delete the recurring transaction: '{TransactionDetails.Name}'?", Color.Error);
        if (result.Canceled) return;

        TransactionDetails.DeletedOnUTC = DateTime.UtcNow;
        MudDialog.Close(DialogResult.Ok(TransactionDetails));
    }
}
