@using Data.Entities
@using Pages.Util
@using System.Globalization
@inject Data.Services.AccountService MR_AccountService
@inject Data.Services.CategoryService MR_CategoryService
@inject Data.Services.RecurringTransactionService MR_RecTranService
@inject Data.Services.TransactionGroupService MR_TransactionGroupService
@inject IDialogService DialogService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Edit - @RecurringTransactionDetails.Name
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField T="string" @bind-Value="@RecurringTransactionDetails.Name" Label="Name" />
        <MudSelect @bind-Value="@RecurringTransactionDetails.TransactionType">
            @foreach (MR_Enum.TransactionType entryType in Enum.GetValues(typeof(MR_Enum.TransactionType)))
            {
                <MudSelectItem Value="@entryType">@entryType</MudSelectItem>
            }
        </MudSelect>
        <MudNumericField T="decimal" @bind-Value="RecurringTransactionDetails.Amount" Immediate="false" Label="Amount" Format="N2" Culture="@CultureInfo.GetCultureInfo("en-US")" HideSpinButtons="true" />
        <MudTextField T="string" @bind-Value="@RecurringTransactionDetails.Notes" Label="Notes" AutoGrow Maxlines="3" />

        <div class="d-flex">
            <MudSelect T="Category" Label="Categories" @bind-SelectedValues="selectedCategories" tabindex="3"
                       AdornmentIcon="@Icons.Material.Filled.Search" AnchorOrigin="Origin.BottomCenter" MultiSelection="true" Variant="Variant.Outlined"
                       MultiSelectionTextFunc="@(new Func<List<string>, string>(GetSelectedItemsText))">
                @foreach (var item in categories)
                {
                    <MudSelectItem T="Category" Value="@item">@item.Name</MudSelectItem>
                }
            </MudSelect>
            <MudButton OnClick="NewCategoryDialog" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" />
        </div>

        <MudSelect @bind-Value="@RecurringTransactionDetails.Frequency">
            @foreach (MR_Enum.Regularity entryType in ((MR_Enum.Regularity[]) Enum.GetValues(typeof(MR_Enum.Regularity))).OrderBy(x => x.ToString()))
            {
                <MudSelectItem Value="@entryType">@entryType</MudSelectItem>
            }
        </MudSelect>

        @switch(RecurringTransactionDetails.Frequency)
        {
            case MR_Enum.Regularity.Annually:
                <MudDatePicker Label="Only Calendar" @bind-Date="frequencyDate" DisableToolbar="true" />
                break;
            case MR_Enum.Regularity.Monthly:
                <MudDatePicker Label="Only Calendar" @bind-Date="frequencyDate" DisableToolbar="true" />
                break;
            case MR_Enum.Regularity.Nonregular:
                break;
            case MR_Enum.Regularity.Unknown:
                break;
            case MR_Enum.Regularity.XDays:
                <MudNumericField @bind-Value="RecurringTransactionDetails.FrequencyValue" Label="Day Count" Variant="Variant.Text" Min="0" Max="100000" />
                break;
            case MR_Enum.Regularity.XWeeks:
                <MudNumericField @bind-Value="RecurringTransactionDetails.FrequencyValue" Label="Week Count" Variant="Variant.Text" Min="0" Max="100000" />
                break;
            case MR_Enum.Regularity.XMonths:
                <MudNumericField @bind-Value="RecurringTransactionDetails.FrequencyValue" Label="Month Count" Variant="Variant.Text" Min="0" Max="100000" />
                break;
            case MR_Enum.Regularity.XWeekYDayOfWeek:
                <MudNumericField @bind-Value="RecurringTransactionDetails.FrequencyValue" Label="Week" Variant="Variant.Text" Min="0" Max="100000" />
                <MudSelect @bind-Value="@frequencyDayOfWeek">
                    @foreach (DayOfWeek entryType in ((DayOfWeek[])Enum.GetValues(typeof(DayOfWeek))).OrderBy(x => (int)x))
                    {
                        <MudSelectItem Value="@entryType">@entryType</MudSelectItem>
                    }
                </MudSelect>
                break;
            default:
                <p>ERROR?</p>
                break;
        }

        <MudDatePicker @ref="_nextDueDatePicker" Label="Next Due Date" Editable="true" @bind-Date="RecurringTransactionDetails.NextDueDate" tabindex="4" PickerVariant="PickerVariant.Dialog">
            <PickerActions>
                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _nextDueDatePicker.Clear())">Clear</MudButton>
                <MudButton OnClick="@(() => _nextDueDatePicker.GoToDate(DateTime.UtcNow, true))">Today</MudButton>
                <MudButton OnClick="@(() => _nextDueDatePicker.Close(false))">Cancel</MudButton>
                <MudButton Color="Color.Primary" OnClick="@(() => _nextDueDatePicker.Close())">Ok</MudButton>
            </PickerActions>
        </MudDatePicker>

        <br />
        <MudTextField T="string" Label="TransactionGroup" ReadOnly />
        <MudTextField T="string" Label="Account List" ReadOnly />

    </DialogContent>
    <DialogActions>
        @if (!IsNew)
        {
            <MudButton Color="Color.Error" OnClick="Delete">Delete</MudButton>
        }
    
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Warning" OnClick="Save">Save</MudButton>
    </DialogActions>

</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public RecurringTransaction RecurringTransactionDetails { get; set; } = new();
    [Parameter] public bool IsNew { get; set; }

    MudDatePicker _nextDueDatePicker;
    List<Category> categories { get; set; } = new();
    List<Account> accounts { get; set; } = new();
    List<TransactionGroup> transactionGroups = new();

    private DateTime? frequencyDate;
    private DayOfWeek frequencyDayOfWeek;

    private IEnumerable<Category> selectedCategories = new HashSet<Category>();

    protected override async Task OnInitializedAsync()
    {
        categories = await MR_CategoryService.GetAllCategoriesAsync();
        accounts = await MR_AccountService.GetAllAccountsAsync();
        transactionGroups = await MR_TransactionGroupService.GetAllTransactionGroupsAsync();
        ResetSelectedCategories();
    }

    private string GetSelectedItemsText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} tag{(selectedValues.Count != 1 ? "s" : "")}";
    }

    private void ResetSelectedCategories()
    {
        HashSet<Category> t = new HashSet<Category>();
        if (RecurringTransactionDetails.Categories.Count() == 0) return;
        foreach (var item in RecurringTransactionDetails.Categories)
        {
            t.Add(item);
        }

        selectedCategories = t;
    }
    private async Task NewCategoryDialog()
    {
        ResetSelectedCategories();

        var result = await DialogUtil.ShowCategoryDialog(DialogService, true, new Category());

        if (!result.Canceled)
        {
            var catData = result.Data as Category;
            categories.Add(catData!);
            RecurringTransactionDetails.Categories.Add(catData!);
            ResetSelectedCategories();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async void Save()
    {
        switch(RecurringTransactionDetails.Frequency)
        {
            case MR_Enum.Regularity.Annually:
                RecurringTransactionDetails.FrequencyDateValue = frequencyDate;
                RecurringTransactionDetails.FrequencyValue = null;
                RecurringTransactionDetails.DayOfWeekValue = null;
                break;
            case MR_Enum.Regularity.Monthly:
                RecurringTransactionDetails.FrequencyDateValue = null;
                RecurringTransactionDetails.FrequencyValue = frequencyDate!.Value.Day;
                RecurringTransactionDetails.DayOfWeekValue = null;
                break;
            case MR_Enum.Regularity.Nonregular:
                RecurringTransactionDetails.FrequencyDateValue = null;
                RecurringTransactionDetails.FrequencyValue = null;
                RecurringTransactionDetails.DayOfWeekValue = null;
                break;
            case MR_Enum.Regularity.Unknown:
                RecurringTransactionDetails.FrequencyDateValue = null;
                RecurringTransactionDetails.FrequencyValue = null;
                RecurringTransactionDetails.DayOfWeekValue = null;
                break;
            case MR_Enum.Regularity.XDays:
                RecurringTransactionDetails.FrequencyDateValue = null;
                //RecurringTransactionDetails.FrequencyValue = null; // Assigned from component
                RecurringTransactionDetails.DayOfWeekValue = null;
                break;
            case MR_Enum.Regularity.XWeeks:
                RecurringTransactionDetails.FrequencyDateValue = null;
                //RecurringTransactionDetails.FrequencyValue = null; // Assigned from component
                RecurringTransactionDetails.DayOfWeekValue = null;
                break;
            case MR_Enum.Regularity.XMonths:
                RecurringTransactionDetails.FrequencyDateValue = null;
                //RecurringTransactionDetails.FrequencyValue = null; // Assigned from component
                RecurringTransactionDetails.DayOfWeekValue = null;
                break;
            case MR_Enum.Regularity.XWeekYDayOfWeek:
                RecurringTransactionDetails.FrequencyDateValue = null;
                //RecurringTransactionDetails.FrequencyValue = ; // Assigned from component
                RecurringTransactionDetails.DayOfWeekValue = frequencyDayOfWeek;
                break;
            default:
                throw new NotImplementedException();
        }

        await MR_RecTranService.UpdateRecurringTransactionAsync(RecurringTransactionDetails);
        MudDialog.Close(DialogResult.Ok(RecurringTransactionDetails));
    }
    private async Task Delete()
    {
        // POP UP A "are you very sure? This is going bye bye"
        RecurringTransactionDetails.DeletedOnUTC = DateTime.UtcNow;
        await MR_RecTranService.DeleteRecurringTransactionAsync(RecurringTransactionDetails);
        MudDialog.Close(DialogResult.Ok(RecurringTransactionDetails));
    }
}
