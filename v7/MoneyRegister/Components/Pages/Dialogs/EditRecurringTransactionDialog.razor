@using Data.Entities
@using Pages.Util
@using System.Globalization
@inject Data.Services.CategoryService MR_CategoryService
@inject Data.Services.LookupService MR_LookupService
@inject Data.Services.RecurringTransactionService MR_RecTranService
@inject Data.Services.TransactionGroupService MR_TransactionGroupService
@inject IDialogService DialogService
@inject NavigationManager NavManager

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            @if (IsNew)
            {
                <MudIcon Icon="@Icons.Material.Filled.Create" Class="mr-3 mb-n1" />
                <text>New Recurring Transaction</text>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
                <text>Edit - @RecurringTransactionDetails.Name</text>
            }
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField T="string" @bind-Value="@RecurringTransactionDetails.Name" Label="Name" tabindex="1" @ref="firstFocus" />

        <MudSelect T="Lookup_TransactionType" Label="Transaction Type" @bind-Value="@RecurringTransactionDetails.TransactionTypeLookup" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" tabindex="2">
            @foreach (var group in TransactionTypeList)
            {
                <MudSelectItem Value="@group">@group.Name</MudSelectItem>
            }
        </MudSelect>
        <MudNumericField T="decimal" @bind-Value="RecurringTransactionDetails.Amount" Immediate="false" Label="Amount" Format="N2" Culture="@CultureInfo.GetCultureInfo("en-US")" HideSpinButtons="true" tabindex="3" />
        <MudTextField T="string" @bind-Value="@RecurringTransactionDetails.Notes" Label="Notes" AutoGrow tabindex="4" />

        <div class="d-flex">
            <MudSelect T="Category" Label="Categories" @bind-SelectedValues="selectedCategories" tabindex="5"
                       AdornmentIcon="@Icons.Material.Filled.Search" AnchorOrigin="Origin.BottomCenter" MultiSelection="true" Variant="Variant.Outlined"
                       MultiSelectionTextFunc="@(new Func<List<string>, string>(GetSelectedItemsText))">
                @foreach (var item in categories)
                {
                    <MudSelectItem T="Category" Value="@item">@item.Name</MudSelectItem>
                }
            </MudSelect>
            <MudButton OnClick="NewCategoryDialog" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" />
        </div>

        <MudSelect T="Lookup_RecurringTransactionFrequency" Label="Regularity" @bind-Value="@RecurringTransactionDetails.FrequencyLookup" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" tabindex="6">
            @foreach (var group in FrequencyList)
            {
                <MudSelectItem Value="@group">@group.Name</MudSelectItem>
            }
        </MudSelect>

        @switch (RecurringTransactionDetails.FrequencyLookup.Name)
        {
            case "Yearly":
                <MudDatePicker Label="Select Date" @bind-Date="frequencyDate" DisableToolbar="true" tabindex="7" />
                break;
            case "Monthly":
                <MudDatePicker Label="Select Day" @bind-Date="frequencyDate" DisableToolbar="true" tabindex="7" />
                break;
            case "Weekly":
                <MudSelect @bind-Value="@frequencyDayOfWeek" tabindex="7">
                    @foreach (DayOfWeek entryType in ((DayOfWeek[])Enum.GetValues(typeof(DayOfWeek))).OrderBy(x => (int)x))
                    {
                        <MudSelectItem Value="@entryType">@entryType</MudSelectItem>
                    }
                </MudSelect>
                break;
            case "XDays":
                <MudNumericField @bind-Value="RecurringTransactionDetails.FrequencyValue" Label="Day Count" Variant="Variant.Text" Min="0" Max="100000" tabindex="7" />
                break;
            case "XMonths":
                <MudNumericField @bind-Value="RecurringTransactionDetails.FrequencyValue" Label="Month Count" Variant="Variant.Text" Min="0" Max="100000" tabindex="7" />
                break;
            case "XWeekYDayOfWeek":
                <MudNumericField @bind-Value="RecurringTransactionDetails.FrequencyValue" Label="Week" Variant="Variant.Text" Min="0" Max="100000" tabindex="7" />
                <MudSelect @bind-Value="@frequencyDayOfWeek" tabindex="8">
                    @foreach (DayOfWeek entryType in ((DayOfWeek[])Enum.GetValues(typeof(DayOfWeek))).OrderBy(x => (int)x))
                    {
                        <MudSelectItem Value="@entryType">@entryType</MudSelectItem>
                    }
                </MudSelect>
                break;
            case "Irregular":
            case "Unknown":
                break;
            default:
                throw new NotImplementedException();
        }

        <MudDatePicker @ref="_nextDueDatePicker" Label="Next Due Date" Editable="true" @bind-Date="RecurringTransactionDetails.NextDueDate" tabindex="9" PickerVariant="PickerVariant.Dialog">
            <PickerActions>
                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _nextDueDatePicker.Clear())">Clear</MudButton>
                <MudButton OnClick="@(() => _nextDueDatePicker.GoToDate(DateTime.UtcNow, true))">Today</MudButton>
                <MudButton OnClick="@(() => _nextDueDatePicker.Close(false))">Cancel</MudButton>
                <MudButton Color="Color.Primary" OnClick="@(() => _nextDueDatePicker.Close())">Ok</MudButton>
            </PickerActions>
        </MudDatePicker>
        <MudSelect T="TransactionGroup" Label="Transaction Group" @bind-Value="@RecurringTransactionDetails.Group" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" tabindex="10">
            <MudSelectItem T="TransactionGroup" Value="@(null)">None</MudSelectItem>
            @foreach (var group in transactionGroups)
            {
                <MudSelectItem Value="@group">@group.Name</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        @if (!IsNew)
        {
            <MudButton Color="Color.Error" OnClick="Delete">Delete</MudButton>
            <MudButton Color="Color.Info" OnClick="GoToTransactionHistory">Show all (@RecurringTransactionDetails.PreviousTransactions.Count()) Transactions</MudButton>
        }

        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Warning" OnClick="Save">Save</MudButton>
    </DialogActions>

</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public RecurringTransaction RecurringTransactionDetails { get; set; } = new();
    [Parameter] public bool IsNew { get; set; }

    MudDatePicker _nextDueDatePicker;
    List<Category> categories { get; set; } = new();
    List<TransactionGroup> transactionGroups = new();
    List<Lookup_TransactionType> TransactionTypeList = new();
    List<Lookup_RecurringTransactionFrequency> FrequencyList = new();

    private DateTime? frequencyDate;
    private DayOfWeek frequencyDayOfWeek;

    private IEnumerable<Category> selectedCategories = new HashSet<Category>();

    private MudTextField<string> firstFocus;

    protected override async Task OnInitializedAsync()
    {
        categories = await MR_CategoryService.GetAllCategoriesAsync();
        transactionGroups = await MR_TransactionGroupService.GetAllTransactionGroupsAsync();
        TransactionTypeList = await MR_LookupService.GetLookup_TransactionTypesAsync();
        FrequencyList = await MR_LookupService.GetLookup_RecurringTransactionFrequenciesAsync();
        ResetSelectedCategories();

        // Assigning some values so we don't end up with an accidental null later
        // Before saving we sanity check the values and assign nulls where needed
        RecurringTransactionDetails.FrequencyDateValue ??= DateTime.Now;
        RecurringTransactionDetails.FrequencyValue ??= 1;
        RecurringTransactionDetails.DayOfWeekValue ??= DayOfWeek.Monday;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await firstFocus.FocusAsync();
        }
    }

    private string GetSelectedItemsText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} tag{(selectedValues.Count != 1 ? "s" : "")}";
    }

    private void ResetSelectedCategories()
    {
        HashSet<Category> t = new HashSet<Category>();
        if (RecurringTransactionDetails.Categories.Count() == 0) return;
        foreach (var item in RecurringTransactionDetails.Categories)
        {
            t.Add(item);
        }

        selectedCategories = t;
    }
    private async Task NewCategoryDialog()
    {
        ResetSelectedCategories();

        var result = await DialogUtil.ShowCategoryDialogAsync(DialogService, true, new Category());

        if (!result.Canceled)
        {
            var catData = result.Data as Category;
            categories.Add(catData!);
            RecurringTransactionDetails.Categories.Add(catData!);
            ResetSelectedCategories();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async void Save()
    {
        switch (RecurringTransactionDetails.FrequencyLookup.Name)
        {
            case "Yearly":
                RecurringTransactionDetails.FrequencyDateValue = frequencyDate == null ? DateTime.Now : frequencyDate;
                RecurringTransactionDetails.FrequencyValue = null;
                RecurringTransactionDetails.DayOfWeekValue = null;
                break;
            case "Monthly":
                RecurringTransactionDetails.FrequencyDateValue = null;
                RecurringTransactionDetails.FrequencyValue = frequencyDate == null ? DateTime.Now.Day : frequencyDate.Value.Day;
                RecurringTransactionDetails.DayOfWeekValue = null;
                break;
            case "Weekly":
                RecurringTransactionDetails.FrequencyDateValue = null;
                RecurringTransactionDetails.FrequencyValue = null;
                RecurringTransactionDetails.DayOfWeekValue = frequencyDayOfWeek;
                break;
            case "XDays":
                RecurringTransactionDetails.FrequencyDateValue = null;
                //RecurringTransactionDetails.FrequencyValue = null; // Assigned from component
                RecurringTransactionDetails.DayOfWeekValue = null;
                break;
            case "XMonths":
                RecurringTransactionDetails.FrequencyDateValue = null;
                //RecurringTransactionDetails.FrequencyValue = null; // Assigned from component
                RecurringTransactionDetails.DayOfWeekValue = null;
                break;
            case "XWeekYDayOfWeek":
                RecurringTransactionDetails.FrequencyDateValue = null;
                //RecurringTransactionDetails.FrequencyValue = ; // Assigned from component
                RecurringTransactionDetails.DayOfWeekValue = frequencyDayOfWeek;
                break;
            case "Irregular":
                RecurringTransactionDetails.FrequencyDateValue = null;
                RecurringTransactionDetails.FrequencyValue = null;
                RecurringTransactionDetails.DayOfWeekValue = null;
                break;
            case "Unknown":
                RecurringTransactionDetails.FrequencyDateValue = null;
                RecurringTransactionDetails.FrequencyValue = null;
                RecurringTransactionDetails.DayOfWeekValue = null;
                break;
            default:
                throw new NotImplementedException();
        }

        RecurringTransactionDetails.Categories = selectedCategories.ToList();

        if (IsNew) await MR_RecTranService.CreateRecurringTransactionAsync(RecurringTransactionDetails);
        else await MR_RecTranService.UpdateRecurringTransactionAsync(RecurringTransactionDetails);

        MudDialog.Close(DialogResult.Ok(RecurringTransactionDetails));
    }
    private async Task Delete()
    {
        var result = await DialogUtil.ShowConfirmDialogAsync(DialogService, "Delete", "Delete", $"Are you sure you want to delete the recurring transaction: '{RecurringTransactionDetails.Name}'?", Color.Error);
        if (result.Canceled) return;

        RecurringTransactionDetails.DeletedOnUTC = DateTime.UtcNow;
        await MR_RecTranService.DeleteRecurringTransactionAsync(RecurringTransactionDetails);
        MudDialog.Close(DialogResult.Ok(RecurringTransactionDetails));
    }

    private async Task GoToTransactionHistory()
    {
        NavManager.NavigateTo($"/editRecurringTransaction/{RecurringTransactionDetails.Id}");
    }
}
