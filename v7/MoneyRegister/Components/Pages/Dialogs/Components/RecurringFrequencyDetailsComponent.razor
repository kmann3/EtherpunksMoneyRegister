@if(Value == null)
{
    <pre>Loading...</pre>
}
else {
    <MudSelect T="Enums.RecurringFrequencyType" Label="Regularity" @bind-Value="Value.RecurringFrequencyType" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" tabindex="@Index">
        @foreach (Enums.RecurringFrequencyType frequencyType in Enum.GetValues(typeof(Enums.RecurringFrequencyType)))
    {
            <MudSelectItem Value="@frequencyType">@frequencyType.ToString()</MudSelectItem>
    }
</MudSelect>
@switch (Value.RecurringFrequencyType)
{
        case Enums.RecurringFrequencyType.Unknown:
            break;
        case Enums.RecurringFrequencyType.Irregular:
            break;
        case Enums.RecurringFrequencyType.Yearly:
            <MudDatePicker Label="Select Date" @bind-Date="Value.FrequencyDateValue" DisableToolbar="true" tabindex="@SecondIndex" />
            break;
        case Enums.RecurringFrequencyType.Monthly:
            <MudDatePicker Label="Select Day" @bind-Date="Value.FrequencyDateValue" DisableToolbar="true" tabindex="@SecondIndex" />
            break;
        case Enums.RecurringFrequencyType.Weekly:
            <MudSelect @bind-Value="Value.FrequencyDayOfWeekValue" tabindex="@SecondIndex">
                @foreach (DayOfWeek? entryType in ((DayOfWeek[])Enum.GetValues(typeof(DayOfWeek))).OrderBy(x => (int)x))
                {
                    <MudSelectItem Value="@entryType">@entryType</MudSelectItem>
                }
            </MudSelect>

            break;
        case Enums.RecurringFrequencyType.XDays:
            <MudNumericField @bind-Value="Value.FrequencyValue" Label="Day Count" Variant="Variant.Text" Min="0" Max="100000" tabindex="@SecondIndex" />
            break;
        case Enums.RecurringFrequencyType.XMonths:
            <MudNumericField @bind-Value="Value.FrequencyValue" Label="Month Count" Variant="Variant.Text" Min="0" Max="100000" tabindex="@SecondIndex" />
            <MudDatePicker Label="Select Day" @bind-Date="Value.FrequencyDateValue" DisableToolbar="true" tabindex="@ThirdIndex" />
            break;
        case Enums.RecurringFrequencyType.XWeekOnYDayOfWeek:
            <MudNumericField @bind-Value="Value.FrequencyValue" Label="Week" Variant="Variant.Text" Min="0" Max="100000" tabindex="@SecondIndex" />
            <MudSelect @bind-Value="Value.FrequencyDayOfWeekValue" tabindex="@ThirdIndex">
                @foreach (DayOfWeek? entryType in ((DayOfWeek[])Enum.GetValues(typeof(DayOfWeek))).OrderBy(x => (int)x))
                {
                    <MudSelectItem Value="@entryType">@entryType</MudSelectItem>
                }
            </MudSelect>
            break;
        default:
            throw new Exception($"Unknown Frequency Type: {Value.RecurringFrequencyType}");
}
}

@code {
    /// <summary>
    /// We bind the whole thing because you can't bind multiple parameters - which is what we need here.
    /// And fortunately only RecurringTransactions have these fields so it doesn't matter
    /// </summary>
    [Parameter] public RecurringTransaction Value
    {
        get
        {
            return _value;
        }
        set
        {
            if (value == _value) return;
            _value = value;

            if (ValueChanged.HasDelegate)
            {
                ValueChanged.InvokeAsync(_value);
            }
        }
    }

    [Parameter] public int Index { get; set; } = 0;
    [Parameter] public EventCallback<RecurringTransaction> ValueChanged { get; set; }

    private RecurringTransaction _value;

    private int SecondIndex { get; set; }
    private int ThirdIndex { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SecondIndex = Index + 1;
        ThirdIndex = Index + 2;

        _value.FrequencyDateValue ??= DateTime.Now;
        _value.FrequencyValue ??= 1;
        _value.FrequencyDayOfWeekValue ??= DayOfWeek.Monday;
    }
}
