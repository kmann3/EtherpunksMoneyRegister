@inject NavigationManager NavManager
@inject IDialogService DialogService
@inject IJSRuntime JS

    <MudGrid Spacing="0">
        <MudItem xs="12">
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-2">
                <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" @onclick="@(e => CreateNewFile())">
                    Upload File
                </MudButton>
            </MudPaper>
        </MudItem>

@if (Value != null && Value.Count > 0)
{
        
    @foreach(var file in Value) 
    {
        <MudItem xs="3">
            <MudPaper Class="d-flex align-left justify-left mud-width-full py-2"><MudButton Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Download" Color="Color.Info" @onclick="@(e => DownloadFile(file.Id))" /></MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-2"><MudLink @onclick="@(e => EditFile(file))">@file.Name -  @ByteSizeLib.ByteSize.FromBytes(@file.Data.Length).ToString()</MudLink></MudPaper>
        </MudItem>
        <MudItem xs="3">
            <MudPaper Class="d-flex align-right justify-right mud-width-full py-2"><MudButton Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="@(e => DeleteTransactionFile(file))" /></MudPaper>
        </MudItem>
    }
}
</MudGrid>

<script>
    function jsSaveAsFile(filename, contentType, byteBase64) {
        var link = document.createElement('a');
        link.download = filename;
        link.href = "data:" + contentType + ";base64," + byteBase64;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>
@code {
    [Parameter]
    public List<MoneyRegister.Data.Entities.TransactionFile> Value
    {
        get
        {
            return _value;
        }
        set
        {
            if (value == _value) return;
            _value = value;

            if (ValueChanged.HasDelegate)
            {
                ValueChanged.InvokeAsync(_value);
            }
        }
    }

    [Parameter] public int Index { get; set; } = 0;
    [Parameter] public EventCallback<List<MoneyRegister.Data.Entities.TransactionFile>> ValueChanged { get; set; }
    [Parameter] public string Label { get; set; }

    private List<MoneyRegister.Data.Entities.TransactionFile> _value;

    private async Task DownloadFile(Guid id)
    {
        TransactionFile file = this.Value.Where(x => x.Id == id).Single();
        await JS.InvokeVoidAsync("jsSaveAsFile", file.Name, file.ContentType, Convert.ToBase64String(file.Data));
    }

    private async Task DeleteTransactionFile(MoneyRegister.Data.Entities.TransactionFile file)
    {
        var result = await DialogUtil.ShowConfirmDialogAsync(DialogService, "Delete", "Delete", $"Are you sure you want to delete the attachment: '{file.Name}'?", Color.Error);
        if (result.Canceled) return;

        this.Value.Remove(file);
    }

    private async Task EditFile(TransactionFile file)
    {
        var result = await DialogUtil.ShowTransactionFileDialog(DialogService, false, file);

        if (!result.Canceled)
        {
            TransactionFile returnData = (TransactionFile)result.Data;
            if (returnData.DeletedOnUTC.HasValue || returnData.Data.Length == 0)
            {
                Value.Remove(returnData);
            }
        }
    }

    private async Task CreateNewFile()
    {
        var result = await DialogUtil.ShowTransactionFileDialog(DialogService, true, new TransactionFile());

        if (!result.Canceled)
        {
            TransactionFile returnData = (TransactionFile)result.Data;
            if (!returnData.DeletedOnUTC.HasValue || returnData.Data.Length > 0)
            {
                Value.Add(returnData);
            }
        }
    }
}
