@implements IDisposable
@inject NavigationManager NavigationManager
@inject Data.Services.DashboardService MR_DashboardService

<MudPaper Width="250px" Class="py-3" Elevation="0">
    <MudNavMenu>
        <MudText Typo="Typo.h6" Class="px-4">Mann's Money Register</MudText>
        <MudDivider Class="my-2" />
        <MudNavLink Href="/" Match="NavLinkMatch.All">Dashboard</MudNavLink>
        @if(dashboardList != null) {
        <MudNavGroup Title="Accounts" Expanded="true">
            @foreach(var account in dashboardList)
            {
                    <MudNavLink Href=@($"/account/{account.Id}") Match="NavLinkMatch.All">@account.Name</MudNavLink>
            }
        </MudNavGroup>
        }
        <MudNavLink Href="/backup" Match="NavLinkMatch.Prefix">Backup</MudNavLink>
        <MudNavLink Href="/recurringTransaction" Match="NavLinkMatch.Prefix">Recurring Transactions</MudNavLink>
    </MudNavMenu>
</MudPaper>
@code {
    private string? currentUrl;
    private List<DashboardService.DashboardItem>? dashboardList;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        dashboardList = await MR_DashboardService.GetDashboardItemsAsync();
        if (dashboardList != null)
        {
            dashboardList = dashboardList.OrderBy(x => x.Name).ToList();
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

